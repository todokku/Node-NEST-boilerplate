var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/AcceptedException.html",[0,0.009,1,2.602]],["body/classes/AcceptedException.html",[0,0.012,1,4.164,2,1.79,3,0.238,4,0.238,5,0.184,6,4.088,7,2.774,8,5.603,9,1.702,10,5.966,11,1.114,12,0.019,13,4.19,14,0.775,15,4.755,16,1.275,17,0.513,18,0.415,19,0.817,20,3.759,21,3.648,22,0.353,23,3.648,24,0.817,25,0.238,26,3.648,27,4.088,28,4.755,29,4.755,30,0.012,31,0.014,32,0.012]],["title/classes/AllExceptionsFilter.html",[0,0.009,33,2.859]],["body/classes/AllExceptionsFilter.html",[0,0.012,2,1.109,3,0.148,4,0.148,5,0.114,8,4.375,11,0.48,12,0.019,13,3.272,14,0.48,16,0.79,17,0.318,18,0.376,19,0.506,20,2.663,22,0.32,23,2.26,24,0.506,25,0.148,27,2.532,30,0.007,31,0.01,32,0.007,33,3.303,34,2.532,35,2.401,36,5.09,37,0.376,38,1.332,39,5.6,40,4.307,41,4.375,42,5.6,43,2.946,44,6.222,45,0.911,46,2.946,47,1.758,48,4.307,49,2.946,50,4.307,51,1.895,52,2.946,53,1.758,54,2.946,55,4.307,56,2.946,57,5.957,58,3.065,59,2.946,60,2.946,61,2.26,62,2.946,63,2.946,64,2.946,65,2.946,66,2.26,67,1.296,68,2.946,69,2.26,70,2.946,71,4.375,72,5.09,73,2.946,74,5.09,75,2.532,76,2.532,77,1.894,78,5.6,79,2.946,80,6.222,81,2.946,82,4.307,83,2.946,84,2.946,85,2.946,86,2.946,87,2.532,88,2.946,89,5.957,90,2.946,91,2.946,92,2.946,93,4.307,94,2.946,95,4.307,96,2.946,97,2.946,98,2.946,99,2.571,100,2.946,101,2.946,102,2.532,103,2.946,104,2.946,105,2.946,106,2.946,107,4.307,108,2.946,109,4.307,110,2.946,111,4.307,112,2.946,113,2.946,114,2.946,115,2.946,116,1.642,117,2.946,118,2.946]],["title/modules/AppModule.html",[119,1.334,120,2.602]],["body/modules/AppModule.html",[0,0.008,3,0.158,4,0.158,5,0.122,12,0.019,22,0.545,24,0.542,25,0.158,30,0.008,31,0.011,32,0.008,66,2.421,69,2.421,119,1.895,120,5.096,121,1.888,122,1.468,123,1.651,124,1.651,125,1.468,126,2.368,127,1.651,128,2.712,129,2.712,130,4.096,131,4.096,132,4.096,133,3.917,134,4.096,135,3.803,136,2.368,137,1.651,138,1.554,139,3.156,140,2.524,141,3.156,142,3.156,143,3.156,144,3.156,145,3.472,146,3.156,147,2.203,148,2.712,149,2.028,150,1.468,151,4.526,152,3.156,153,2.712,154,3.891,155,2.203,156,2.712,157,1.884,158,2.712,159,3.156,160,1.894,161,3.156,162,3.156,163,1.468,164,1.316,165,2.028,166,3.156,167,3.156,168,3.156,169,3.156,170,1.389,171,3.156,172,3.156,173,1.554,174,3.156,175,2.421,176,3.156,177,3.156,178,3.156,179,3.156,180,2.712,181,2.028,182,2.712,183,2.712,184,2.712,185,3.156,186,2.712,187,4.526,188,3.156,189,3.156,190,3.156,191,3.156,192,3.156,193,2.712,194,1.316]],["title/controllers/AuthController.html",[195,1.64,196,2.602]],["body/controllers/AuthController.html",[0,0.006,3,0.119,4,0.119,5,0.092,12,0.019,14,0.884,16,1.454,17,0.585,18,0.438,19,0.932,22,0.503,24,0.407,25,0.119,30,0.006,31,0.009,32,0.006,37,0.207,38,1.131,45,1.678,61,3.424,67,2.785,116,1.321,194,0.988,195,1.042,196,2.552,197,2.036,198,1.523,199,1.817,200,3.424,201,4.926,202,5.731,203,3.142,204,2.664,205,3.859,206,2.369,207,3.84,208,3.965,209,1.848,210,3.656,211,2.369,212,5.019,213,2.388,214,2.052,215,2.845,216,4.156,217,3.184,218,2.369,219,2.036,220,3.503,221,2.369,222,2.369,223,3.142,224,2.369,225,2.369,226,2.369,227,2.369,228,2.369,229,2.369,230,2.369,231,4,232,2.369,233,2.369,234,2.369,235,1.523,236,1.817,237,1.653,238,1.523,239,2.036,240,2.036,241,2.369,242,2.036,243,2.036,244,2.036,245,1.817,246,1.653,247,1.239,248,2.489,249,1.817,250,2.369,251,2.369,252,1.653,253,4,254,3.503,255,0.891,256,1.653,257,2.038,258,1.653,259,1.817,260,2.804,261,1.653,262,2.369,263,2.369,264,2.036,265,2.036,266,1.102,267,0.475,268,2.369,269,2.369,270,3.785,271,2.369,272,1.599,273,2.369,274,2.369,275,3.116,276,2.369,277,2.369,278,2.369,279,2.369,280,2.369,281,2.369,282,4.464,283,2.369,284,1.523,285,2.369,286,1.523,287,1.817,288,2.369,289,2.369,290,2.369,291,2.369,292,2.369]],["title/modules/AuthModule.html",[119,1.334,130,2.396]],["body/modules/AuthModule.html",[0,0.009,3,0.194,4,0.194,5,0.15,12,0.019,22,0.532,24,0.666,25,0.194,30,0.009,31,0.013,32,0.009,47,2.312,119,2.114,121,1.616,122,1.802,123,2.027,124,2.027,125,1.802,126,3.089,127,3.089,130,4.755,135,4.056,136,2.731,137,2.027,138,1.908,140,2.911,194,2.178,196,4.122,247,2.027,248,4.098,249,2.972,293,3.33,294,3.874,295,3.33,296,3.33,297,4.368,298,4.368,299,3.874,300,2.704,301,3.33,302,3.874,303,3.874,304,5.221,305,3.874,306,2.972,307,3.874,308,3.874,309,3.874,310,3.33,311,3.33,312,3.33,313,3.874]],["title/injectables/AuthService.html",[248,2.078,314,0.641]],["body/injectables/AuthService.html",[0,0.006,3,0.125,4,0.125,5,0.097,9,1.361,11,0.954,12,0.019,14,0.954,16,1.568,17,0.631,18,0.484,19,1.006,22,0.487,24,0.429,25,0.125,30,0.011,31,0.009,32,0.006,37,0.218,38,1.176,45,1.717,58,3.089,75,2.144,87,4.432,116,1.391,160,0.772,200,2.917,201,3.269,203,3.269,204,4.034,205,2.27,207,3.314,208,3.314,213,2.086,214,1.846,219,3.269,223,2.144,235,1.603,236,1.913,237,1.741,243,2.144,244,2.144,245,1.913,248,2.12,260,2.917,261,1.741,267,0.762,272,1.725,284,3.568,286,4.031,287,1.913,306,1.913,314,0.654,315,0.893,316,2.144,317,3.803,318,2.494,319,5.849,320,3.392,321,2.494,322,3.803,323,4.609,324,2.494,325,2.494,326,2.494,327,3.803,328,2.697,329,2.494,330,0.988,331,3.803,332,3.314,333,2.494,334,3.803,335,2.494,336,1.913,337,2.494,338,2.494,339,3.803,340,2.27,341,2.494,342,3.962,343,2.494,344,3.803,345,2.494,346,2.494,347,2.494,348,2.494,349,0.893,350,2.494,351,0.893,352,2.494,353,0.893,354,2.144,355,3.269,356,3.803,357,2.494,358,2.144,359,3.803,360,2.494,361,2.494,362,2.494,363,3.803,364,2.494,365,3.803,366,2.494,367,3.803]],["title/classes/BaseDtoClass.html",[0,0.009,368,2.078]],["body/classes/BaseDtoClass.html",[0,0.012,2,1.29,3,0.172,4,0.172,5,0.133,11,0.783,12,0.019,14,1.067,17,0.762,18,0.571,19,1.214,22,0.412,25,0.172,30,0.008,31,0.012,32,0.008,37,0.299,51,1.509,99,2.866,160,1.061,164,2.635,165,3.086,209,1.169,215,2.641,255,1.29,267,1.397,328,2.898,330,1.358,349,1.983,368,2.677,369,5.778,370,2.948,371,1.485,372,3.561,373,3.561,374,3.307,375,3.561,376,2.365,377,3.429,378,3.429,379,3.858,380,3.429,381,2.866,382,3.429,383,1.595,384,2.204,385,3.429,386,3.429,387,2.956,388,4.127,389,4.127,390,4.801,391,4.801,392,2.729,393,2.948,394,2.047,395,3.429,396,3.429,397,3.429,398,3.429,399,3.429,400,3.429,401,4.801,402,3.683,403,4.801,404,4.127]],["title/classes/ChangePasswordDto.html",[0,0.009,208,2.396]],["body/classes/ChangePasswordDto.html",[0,0.013,2,1.435,3,0.191,4,0.191,5,0.148,11,1.103,12,0.019,14,0.955,18,0.511,20,3.539,22,0.384,25,0.191,30,0.009,31,0.013,32,0.009,37,0.333,51,1.678,208,3.32,209,1.996,213,1.238,214,2.669,215,2.273,255,1.435,267,1.429,371,1.598,383,2.724,387,3.093,392,2.885,405,5.397,406,3.278,407,5.858,408,5.035,409,5.858,410,5.165,411,4.721,412,3.813,413,3.813,414,5.165,415,4.44,416,5.165,417,3.813,418,3.813,419,2.276,420,2.662,421,3.278,422,2.451,423,4.089,424,5.165,425,2.662]],["title/controllers/CitiesController.html",[195,1.64,426,2.602]],["body/controllers/CitiesController.html",[0,0.007,3,0.138,4,0.138,5,0.107,11,1.076,12,0.019,14,0.944,16,1.451,17,0.584,18,0.472,19,0.931,22,0.467,24,0.472,25,0.138,30,0.007,31,0.01,32,0.007,37,0.24,38,1.265,45,1.79,163,2.822,170,2.766,194,1.146,195,1.209,198,1.766,209,1.972,215,2.956,216,4.318,217,3.309,246,1.917,247,1.437,252,1.917,253,4.235,254,2.855,255,1.034,256,2.855,257,2.28,258,1.917,266,1.277,267,0.55,270,4.04,272,1.707,275,1.917,330,2.864,353,0.983,426,2.855,427,2.361,428,4.44,429,2.989,430,4.152,431,2.28,432,2.747,433,4.387,434,2.107,435,3.521,436,2.747,437,4.09,438,1.531,439,2.107,440,2.747,441,2.361,442,2.747,443,1.531,444,2.361,445,2.747,446,1.531,447,5.413,448,2.107,449,2.747,450,2.441,451,2.107,452,2.747,453,2.556,454,2.361,455,2.107,456,2.107,457,2.107,458,2.747,459,2.747,460,4.152,461,2.361,462,2.747,463,2.747,464,2.107,465,2.107,466,2.747,467,2.107,468,2.107,469,2.747,470,2.107,471,2.361,472,2.747]],["title/modules/CitiesModule.html",[119,1.334,131,2.396]],["body/modules/CitiesModule.html",[0,0.011,3,0.225,4,0.225,5,0.174,12,0.019,17,0.485,22,0.514,24,0.772,25,0.225,30,0.011,31,0.014,32,0.011,119,2.273,121,1.874,122,2.089,123,2.35,124,2.35,125,2.089,126,3.322,127,2.35,131,4.552,136,3.011,137,2.35,138,2.213,140,2.505,149,2.888,150,2.089,160,1.39,194,2.4,205,2.682,426,4.432,435,2.835,453,3.704,454,3.862,473,3.862,474,3.862,475,4.493,476,4.493,477,4.414,478,4.493,479,2.213,480,3.136,481,2.505]],["title/injectables/CitiesService.html",[314,0.641,453,1.95]],["body/injectables/CitiesService.html",[0,0.005,3,0.114,4,0.114,5,0.088,9,1.266,11,0.708,12,0.019,14,0.918,16,1.425,17,0.608,18,0.379,19,0.914,22,0.418,24,0.39,25,0.114,30,0.005,31,0.009,32,0.013,37,0.198,38,1.094,45,1.645,47,1.355,53,3.813,58,1.118,67,0.999,99,1.355,133,1.355,150,1.055,156,3.04,157,2.111,158,1.951,160,0.702,163,1.645,170,1.556,173,1.118,267,0.455,272,1.568,314,0.608,315,0.812,330,2.23,340,1.355,349,1.756,429,1.742,431,1.972,435,2.619,438,1.972,443,1.972,446,1.972,453,1.85,479,2.416,482,1.951,483,3.424,484,2.27,485,3.279,486,2.27,487,4.345,488,3.04,489,4.105,490,2.27,491,2.27,492,2.27,493,2.27,494,2.27,495,1.741,496,2.27,497,1.584,498,2.27,499,2.27,500,2.27,501,2.27,502,5.683,503,3.931,504,2.27,505,4.57,506,2.27,507,2.27,508,4.216,509,2.27,510,2.27,511,1.951,512,1.951,513,2.27,514,2.27,515,2.27,516,2.27,517,2.27,518,2.27,519,2.27,520,2.27,521,2.27,522,2.27,523,2.27,524,2.27,525,2.27,526,2.27,527,2.27,528,2.27,529,2.27,530,2.27,531,2.27,532,2.27,533,1.741,534,2.27,535,2.27,536,2.27,537,2.27,538,1.584,539,2.27,540,2.27,541,2.27]],["title/injectables/CitiesService-1.html",[314,0.535,453,1.629,542,2.001]],["body/injectables/CitiesService-1.html",[0,0.009,3,0.179,4,0.179,5,0.139,9,1.771,11,0.924,12,0.019,14,1.082,16,1.72,17,0.692,18,0.312,19,1.103,22,0.454,24,0.615,25,0.179,30,0.009,31,0.012,32,0.009,37,0.312,38,1.53,45,1.985,47,2.137,67,1.575,150,1.665,157,2.137,160,1.108,163,2.301,170,2.177,173,1.763,267,0.717,272,1.892,314,0.85,315,1.282,330,2.628,340,2.137,349,2.029,429,2.437,431,2.758,435,3.161,438,2.758,443,2.758,446,2.758,453,2.588,479,3.012,483,4.268,485,1.996,488,4.252,495,2.746,497,2.499,538,2.499,543,3.077,544,3.58,545,3.58,546,3.58,547,3.58,548,3.58,549,3.58,550,3.58,551,3.58,552,3.58,553,3.58,554,3.58,555,3.58,556,3.58,557,3.58]],["title/classes/CityDto.html",[0,0.009,433,2.602]],["body/classes/CityDto.html",[0,0.01,2,1.597,3,0.213,4,0.213,5,0.165,7,2.58,11,0.692,12,0.018,14,1.137,17,0.707,18,0.608,19,1.264,22,0.315,25,0.213,30,0.01,31,0.013,32,0.01,37,0.37,164,1.771,209,1.447,215,1.868,267,1.397,328,2.221,349,1.986,368,4.062,371,1.716,372,3.566,373,3.566,374,3.311,375,3.566,376,2.091,379,3.566,381,2.534,383,1.974,384,2.729,433,3.872,558,3.649,559,4.868,560,2.963,561,2.963,562,2.963,563,2.963,564,2.963,565,2.963,566,2.963,567,2.963]],["title/controllers/CountriesController.html",[195,1.64,568,2.602]],["body/controllers/CountriesController.html",[0,0.012,3,0.253,4,0.253,5,0.196,12,0.019,22,0.532,24,0.868,25,0.253,30,0.012,31,0.015,32,0.012,53,3.015,160,1.562,194,2.107,195,2.223,198,3.247,479,2.488,568,4.323,569,4.342,570,5.051,571,3.998,572,4.342,573,3.525,574,4.342,575,5.323,576,4.342,577,4.342,578,5.051]],["title/modules/CountriesModule.html",[119,1.334,132,2.396]],["body/modules/CountriesModule.html",[0,0.011,3,0.225,4,0.225,5,0.174,12,0.019,17,0.485,22,0.514,24,0.772,25,0.225,30,0.011,31,0.014,32,0.011,119,2.273,121,1.874,122,2.089,123,2.35,124,2.35,125,2.089,126,3.322,127,2.35,132,4.552,136,3.011,137,2.35,138,2.213,140,2.505,149,2.888,150,2.089,160,1.39,194,2.4,205,2.682,435,2.213,479,2.213,480,3.136,481,2.505,568,4.432,571,4.226,572,3.862,573,4.017,574,3.862,579,3.862,580,3.862,581,4.493,582,4.493,583,4.493]],["title/injectables/CountriesService.html",[314,0.641,571,2.225]],["body/injectables/CountriesService.html",[0,0.014,3,0.282,4,0.282,5,0.219,12,0.018,22,0.419,24,0.969,25,0.282,30,0.014,31,0.016,32,0.014,314,1.137,315,2.017,571,3.947,584,4.843]],["title/classes/CreateUserDto.html",[0,0.009,585,2.602]],["body/classes/CreateUserDto.html",[0,0.01,2,1.102,3,0.147,4,0.147,5,0.114,7,1.994,11,1.094,12,0.019,14,1.127,17,0.724,18,0.603,19,1.173,20,2.921,22,0.415,25,0.147,30,0.007,31,0.01,32,0.007,37,0.255,51,1.289,164,1.221,173,2.112,209,2.116,213,1.647,214,2.402,215,1.289,255,1.102,267,1.244,328,1.532,349,1.535,351,1.999,353,1.816,368,3.741,371,1.326,372,2.756,373,2.756,374,2.559,375,2.756,376,1.442,379,2.756,381,1.748,383,2.764,384,1.882,387,3.058,392,3.058,411,3.897,419,2.559,420,2.044,422,2.756,423,2.993,425,2.044,559,4.334,560,2.044,561,2.044,562,2.044,563,2.044,564,2.044,565,2.044,566,2.044,567,2.044,585,2.993,586,5.337,587,2.044,588,4.36,589,3.685,590,2.928,591,2.246,592,2.928,593,2.246,594,2.928,595,2.517,596,3.891,597,2.517,598,2.928,599,2.928,600,2.517,601,4.36,602,2.928,603,4.288,604,2.246,605,3.685,606,2.246,607,2.756,608,2.928]],["title/injectables/DeleteFieldsInterceptor.html",[238,2.396,314,0.641]],["body/injectables/DeleteFieldsInterceptor.html",[0,0.008,3,0.175,4,0.175,5,0.136,9,1.251,11,1.124,12,0.019,13,4.234,14,0.793,16,1.304,17,0.525,18,0.424,19,0.836,22,0.416,24,0.601,25,0.175,30,0.008,31,0.012,32,0.008,35,1.948,37,0.305,38,1.505,45,1.081,58,2.757,170,2.463,238,3.127,266,1.625,272,1.942,314,0.836,315,1.251,402,4.293,503,3.396,542,2.246,609,4.293,610,2.681,611,4.182,612,3.495,613,3.495,614,4.182,615,4.182,616,4.642,617,5.201,618,3.495,619,2.439,620,4.293,621,4.182,622,2.439,623,3.495,624,3.495,625,5.924,626,3.732,627,4.182,628,3.004,629,3.495,630,3.495,631,3.495,632,5.201,633,3.495,634,3.495,635,3.495,636,3.495,637,3.495,638,3.495,639,4.865,640,4.865,641,3.495,642,3.495]],["title/modules/ElasticSearchModule.html",[119,1.334,133,2.225]],["body/modules/ElasticSearchModule.html",[0,0.011,3,0.222,4,0.222,5,0.172,9,1.584,12,0.019,22,0.468,24,0.761,25,0.222,30,0.011,31,0.014,32,0.011,119,2.257,121,1.846,122,2.058,123,2.315,124,2.315,125,2.058,126,3.298,127,3.298,133,4.338,136,2.981,137,2.315,138,2.179,140,2.467,155,3.088,157,2.641,180,4.898,182,3.803,183,3.803,199,3.394,214,1.584,336,3.394,485,4.18,495,3.394,643,3.803,644,3.803,645,3.803,646,3.394,647,4.425,648,5.699,649,4.425,650,4.425]],["title/injectables/ElasticSearchService.html",[314,0.641,485,2.078]],["body/injectables/ElasticSearchService.html",[0,0.012,3,0.24,4,0.24,5,0.186,9,1.714,12,0.019,14,0.78,16,1.283,17,0.516,18,0.418,19,0.823,22,0.445,24,0.823,25,0.24,30,0.012,31,0.015,32,0.012,53,2.857,58,2.358,155,3.341,157,3.576,181,3.077,204,2.857,266,2.226,267,0.959,286,3.077,314,1.03,315,1.714,349,1.714,485,4.116,626,3.672,646,4.595,651,4.114,652,4.787,653,4.787,654,4.787,655,4.787,656,4.787,657,4.787]],["title/interfaces/IChangePassword.html",[658,1.334,659,2.602]],["body/interfaces/IChangePassword.html",[3,0.273,4,0.273,5,0.211,11,1.128,12,0.018,18,0.475,25,0.273,30,0.013,31,0.016,32,0.013,37,0.475,214,2.564,267,1.091,371,2.005,658,1.949,659,4.524,660,2.849,661,4.681,662,4.681]],["title/interfaces/ICity.html",[489,2.602,658,1.334]],["body/interfaces/ICity.html",[3,0.256,4,0.256,5,0.198,7,2.899,11,1.192,12,0.018,17,0.756,18,0.544,19,1.071,22,0.379,25,0.256,30,0.012,31,0.015,32,0.012,37,0.445,160,1.579,164,2.807,330,2.775,371,1.928,489,4.35,658,1.827,660,2.67,663,4.387]],["title/interfaces/ILocation.html",[658,1.334,664,2.859]],["body/interfaces/ILocation.html",[3,0.266,4,0.266,5,0.206,12,0.018,18,0.557,25,0.266,30,0.013,31,0.015,32,0.013,37,0.463,371,1.974,376,3.634,658,1.9,660,2.777,664,4.896,665,4.562,666,4.956,667,4.956]],["title/interfaces/IMongoPoint.html",[658,1.334,668,2.396]],["body/interfaces/IMongoPoint.html",[3,0.265,4,0.265,5,0.205,11,1.114,12,0.018,18,0.643,25,0.265,30,0.013,31,0.015,32,0.013,37,0.461,371,1.97,376,3.366,658,1.893,660,2.767,668,4.094,669,4.546,670,4.546,671,5.44]],["title/interfaces/IRestaurant.html",[658,1.334,672,2.602]],["body/interfaces/IRestaurant.html",[3,0.213,4,0.213,5,0.165,7,2.58,11,1.232,12,0.019,17,0.707,18,0.608,19,0.954,22,0.459,25,0.213,30,0.01,31,0.013,32,0.01,37,0.37,160,1.313,164,2.578,267,1.362,330,2.595,351,2.346,371,1.716,394,2.534,658,1.52,660,2.221,668,4.212,672,3.872,673,3.649,674,4.574,675,3.911,676,4.212,677,3.911,678,4.245,679,3.649]],["title/interfaces/IUser.html",[332,2.396,658,1.334]],["body/interfaces/IUser.html",[3,0.241,4,0.241,5,0.186,7,2.791,11,1.236,12,0.018,17,0.74,18,0.598,19,1.032,22,0.357,25,0.241,30,0.012,31,0.015,32,0.012,37,0.419,160,1.486,164,2.731,214,2.456,332,3.859,351,2.456,353,2.456,371,1.857,658,1.719,660,2.512,680,4.128]],["title/interfaces/IUserJWT.html",[207,2.396,658,1.334]],["body/interfaces/IUserJWT.html",[3,0.257,4,0.257,5,0.199,11,1.228,12,0.018,18,0.588,25,0.257,30,0.012,31,0.015,32,0.012,37,0.447,207,4.015,349,2.512,351,2.512,353,2.512,371,1.932,658,1.833,660,2.679,681,4.402,682,4.402]],["title/injectables/JoiValidatorPipe.html",[314,0.641,683,2.602]],["body/injectables/JoiValidatorPipe.html",[0,0.01,3,0.207,4,0.207,5,0.16,9,1.949,11,0.993,12,0.019,14,0.888,16,1.459,17,0.587,18,0.475,19,0.936,20,2.158,22,0.405,23,3.164,24,0.709,25,0.207,30,0.01,31,0.013,32,0.01,35,2.3,37,0.36,38,1.684,45,1.276,58,2.032,67,1.815,71,4.68,76,3.546,77,3.917,257,3.035,267,1.091,272,1.216,284,2.652,314,0.936,315,1.477,340,3.25,683,3.8,684,4.674,685,3.546,686,4.176,687,3.164,688,6.094,689,6.094,690,4.125,691,4.176,692,4.176,693,4.253,694,4.971,695,4.125,696,4.176,697,4.176,698,3.164,699,3.164,700,4.125,701,4.125,702,4.125,703,4.125,704,3.546,705,4.125,706,3.164]],["title/injectables/JwtStrategy.html",[297,2.396,314,0.641]],["body/injectables/JwtStrategy.html",[0,0.011,3,0.224,4,0.224,5,0.174,7,2.083,9,2.27,12,0.019,14,0.936,16,1.2,17,0.483,18,0.391,19,0.77,22,0.497,24,0.77,25,0.224,26,3.436,30,0.011,31,0.014,32,0.011,37,0.391,38,1.777,45,1.386,204,3.784,247,2.343,272,1.321,297,3.692,300,3.126,301,3.85,311,3.85,314,0.987,315,1.603,349,1.603,351,1.603,353,1.603,707,3.85,708,4.937,709,4.479,710,5.743,711,4.479,712,4.479,713,4.479,714,3.85,715,2.879,716,3.436,717,3.85,718,3.85,719,4.479,720,4.479,721,3.85,722,3.85,723,4.479,724,4.479,725,4.479,726,4.479]],["title/injectables/LocalStrategy.html",[298,2.396,314,0.641]],["body/injectables/LocalStrategy.html",[0,0.01,3,0.209,4,0.209,5,0.162,7,1.94,9,1.494,11,1.132,12,0.019,14,0.894,16,1.47,17,0.592,18,0.479,19,0.943,22,0.502,24,0.717,25,0.209,26,3.2,30,0.01,31,0.013,32,0.01,37,0.364,38,1.697,45,1.291,47,2.49,58,2.055,116,2.326,204,3.658,213,1.989,214,2.33,237,2.912,247,2.183,248,3.87,249,3.2,266,1.94,267,0.836,272,1.23,284,2.682,286,2.682,298,3.526,314,0.943,315,1.494,336,3.2,355,3.586,708,4.715,714,3.586,715,2.682,717,3.586,718,3.586,727,3.586,728,4.172,729,4.172,730,5.485,731,4.172,732,4.715,733,3.586,734,4.172,735,4.172]],["title/classes/LocationDto.html",[0,0.009,677,2.225]],["body/classes/LocationDto.html",[0,0.014,2,1.728,3,0.23,4,0.23,5,0.178,12,0.018,14,0.951,18,0.509,22,0.434,25,0.23,30,0.011,31,0.014,32,0.011,37,0.401,51,2.02,209,1.989,255,1.728,267,1.427,371,1.805,376,3.324,383,2.714,387,3.159,389,5.513,392,2.874,666,4.477,667,4.477,677,3.483,736,3.947,737,4.591,738,4.591,739,4.591,740,4.591,741,6.414,742,3.947,743,5.016,744,4.591,745,4.591,746,4.591,747,4.591]],["title/injectables/MongoPointToObjectInterceptor.html",[314,0.641,748,2.859]],["body/injectables/MongoPointToObjectInterceptor.html",[0,0.012,3,0.239,4,0.239,5,0.185,12,0.018,14,0.778,16,1.279,17,0.515,18,0.416,19,0.82,22,0.444,24,0.82,25,0.239,30,0.012,31,0.014,32,0.012,35,2.66,37,0.416,38,1.849,45,1.476,217,2.945,272,1.407,314,1.028,315,1.708,402,5.008,611,5.139,615,5.139,616,5.25,617,5.883,619,3.33,620,5.008,621,5.139,622,3.33,748,4.586,749,5.139,750,4.101,751,4.771,752,4.771]],["title/injectables/ObjectToMongoPointPipe.html",[314,0.641,753,2.602]],["body/injectables/ObjectToMongoPointPipe.html",[0,0.01,3,0.215,4,0.215,5,0.167,9,1.537,11,1.013,12,0.019,14,0.911,16,1.498,17,0.603,18,0.574,19,0.961,21,3.294,22,0.319,24,0.738,25,0.215,30,0.01,31,0.014,32,0.01,35,2.395,37,0.375,38,1.729,45,1.329,217,2.753,257,3.465,266,1.997,267,0.861,272,1.266,314,0.961,315,1.537,394,3.709,671,4.288,686,4.288,687,3.294,691,4.288,692,4.288,693,4.337,694,5.049,696,4.288,706,3.294,753,3.902,754,4.767,755,3.692,756,4.295,757,4.295,758,4.295,759,4.295,760,4.295,761,4.295,762,4.295]],["title/injectables/ParseToObjectPipe.html",[314,0.641,763,2.602]],["body/injectables/ParseToObjectPipe.html",[0,0.011,3,0.229,4,0.229,5,0.178,9,1.638,11,1.044,12,0.018,14,0.949,16,1.561,17,0.628,18,0.508,19,1.001,22,0.433,24,0.787,25,0.229,30,0.011,31,0.014,32,0.011,35,2.552,37,0.399,38,1.801,45,1.416,257,3.247,266,2.129,267,0.917,272,1.35,314,1.001,315,1.638,686,4.467,687,3.511,691,4.467,692,4.467,693,4.47,694,5.171,696,4.467,697,3.511,698,3.511,699,3.511,706,3.511,763,4.065,764,5.505,765,3.934,766,4.577,767,4.577,768,4.577]],["title/classes/RegisterNewUserDto.html",[0,0.009,231,2.602]],["body/classes/RegisterNewUserDto.html",[0,0.012,2,1.347,3,0.179,4,0.179,5,0.139,11,1.13,12,0.019,14,1.046,17,0.692,18,0.56,20,3.199,22,0.368,25,0.179,30,0.009,31,0.012,32,0.009,37,0.312,51,1.575,67,2.92,77,2.301,209,2.084,213,1.985,214,2.519,231,3.453,255,1.347,267,1.454,351,2.189,353,2.029,371,1.53,383,2.844,387,3.161,392,3.012,411,4.268,419,2.953,420,2.499,421,3.077,422,3.18,423,3.453,425,2.499,587,2.499,588,4.873,589,4.252,591,2.746,593,2.746,595,3.077,604,2.746,605,4.252,769,5.704,770,3.58,771,3.58,772,3.58,773,3.077,774,3.58]],["title/classes/RestaurantDto.html",[0,0.009,775,2.602]],["body/classes/RestaurantDto.html",[0,0.011,2,1.162,3,0.155,4,0.155,5,0.12,7,2.073,11,1.109,12,0.019,14,1.126,17,0.618,18,0.616,19,1.187,22,0.425,25,0.155,30,0.007,31,0.011,32,0.007,37,0.269,51,1.359,53,1.844,164,1.288,209,2.069,215,1.359,255,1.162,267,1.458,272,0.911,328,1.616,330,1.223,349,1.596,351,2.05,368,3.792,371,1.379,372,2.865,373,2.865,374,2.661,375,2.865,376,1.522,379,2.865,381,1.844,383,2.432,384,1.986,387,3.116,388,3.831,392,2.196,393,2.655,419,2.661,435,1.522,559,4.415,560,2.156,561,2.156,562,2.156,563,2.156,564,2.156,565,2.156,566,2.156,567,2.156,619,2.156,674,3.65,675,3.418,676,3.681,677,3.776,775,3.111,776,2.655,777,3.089,778,3.089,779,3.089,780,3.089,781,3.089,782,4.457,783,3.831,784,3.089,785,3.089,786,3.089,787,3.089,788,3.089]],["title/controllers/RestaurantsController.html",[195,1.64,789,2.602]],["body/controllers/RestaurantsController.html",[0,0.004,3,0.091,4,0.091,5,0.167,11,0.946,12,0.019,14,0.915,16,1.367,17,0.672,18,0.489,19,0.877,22,0.49,24,0.508,25,0.091,30,0.004,31,0.007,32,0.004,37,0.158,38,0.915,45,1.735,67,2.245,121,0.757,163,2.502,170,2.368,181,3.458,194,0.757,195,0.798,198,1.166,209,1.912,215,2.903,216,4.24,217,3.314,245,1.391,246,1.266,247,0.949,252,1.266,253,4.05,254,2.064,255,0.683,256,2.064,257,3.635,258,1.266,259,1.391,266,0.844,267,0.363,270,3.916,272,1.654,275,1.266,330,2.639,353,0.649,394,1.083,429,2.65,430,3.313,431,1.649,434,1.391,435,2.127,438,1.011,439,1.391,441,1.559,443,1.011,446,1.011,448,1.391,450,1.765,451,1.391,455,1.391,456,1.391,457,1.391,460,2.872,464,1.391,465,1.391,467,1.391,468,1.391,470,1.391,481,1.011,503,2.064,675,3.211,677,2.578,679,1.559,683,1.266,684,1.391,698,1.391,753,2.064,754,1.391,763,1.266,775,3.32,789,2.064,790,1.559,791,4.988,792,3.712,793,2.542,794,1.814,795,4.526,796,1.814,797,2.957,798,1.814,799,1.814,800,1.814,801,1.814,802,1.814,803,1.814,804,2.269,805,3.712,806,2.957,807,2.957,808,1.814,809,1.814,810,1.814,811,3.712,812,3.712,813,1.814,814,1.814,815,3.014,816,1.814,817,1.814,818,1.814,819,1.814,820,1.814,821,1.814,822,1.814,823,1.814,824,1.559,825,3.744,826,1.814,827,1.559,828,1.266,829,1.814,830,3.744,831,1.814,832,1.814,833,2.235,834,1.559,835,2.872,836,1.814,837,1.814,838,2.872,839,1.814,840,1.814,841,1.814,842,1.814,843,1.814,844,2.957,845,1.814,846,1.814,847,2.957,848,2.957,849,2.957,850,2.957,851,2.957,852,2.957,853,2.542,854,1.814,855,1.814,856,1.814,857,1.814,858,1.814,859,1.814,860,1.814,861,1.814,862,1.814,863,1.814,864,1.814,865,1.814,866,1.814]],["title/modules/RestaurantsModule.html",[119,1.334,134,2.396]],["body/modules/RestaurantsModule.html",[0,0.011,3,0.225,4,0.225,5,0.174,12,0.019,17,0.485,22,0.514,24,0.772,25,0.225,30,0.011,31,0.014,32,0.011,119,2.273,121,1.874,122,2.089,123,2.35,124,2.35,125,2.089,126,3.322,127,2.35,134,4.552,136,3.011,137,2.35,138,2.213,140,2.505,149,2.888,150,2.089,160,1.39,194,2.4,205,2.682,479,2.213,480,3.136,481,2.505,789,4.432,795,3.699,833,4.226,834,3.862,867,3.862,868,3.862,869,4.493,870,4.493,871,4.414,872,4.493]],["title/classes/RestaurantsSearchDto.html",[0,0.009,815,2.602]],["body/classes/RestaurantsSearchDto.html",[0,0.015,2,1.862,3,0.248,4,0.248,5,0.192,11,0.997,12,0.018,14,0.807,17,0.768,18,0.432,22,0.454,25,0.248,30,0.012,31,0.015,32,0.012,37,0.432,51,2.178,209,1.686,255,1.862,267,1.33,371,1.892,383,2.301,387,3.012,392,2.437,422,3.931,593,3.796,795,3.931,815,4.268,873,5.257,874,4.254,875,4.948]],["title/injectables/RestaurantsService.html",[314,0.641,833,2.225]],["body/injectables/RestaurantsService.html",[0,0.006,3,0.13,4,0.13,5,0.1,9,1.4,11,0.768,12,0.019,14,1.058,16,1.651,17,0.714,18,0.411,19,1.059,22,0.39,24,0.445,25,0.13,30,0.006,31,0.009,32,0.006,37,0.226,38,1.209,45,1.962,67,1.72,69,1.984,99,3.367,150,1.203,160,0.8,163,1.818,170,1.72,173,1.926,181,2.513,267,0.518,272,1.87,314,0.672,315,0.926,330,2.349,340,1.544,349,2.205,351,1.4,428,1.984,429,1.926,431,2.18,435,2.587,438,2.18,443,2.18,446,2.18,479,2.587,483,3.666,497,1.805,538,1.805,542,2.513,666,1.805,667,1.805,668,1.663,672,4.3,674,2.729,675,2.334,676,3.377,792,4.515,793,3.361,795,3.626,804,1.984,833,2.334,876,2.223,877,2.587,878,2.587,879,3.91,880,3.91,881,2.587,882,2.587,883,2.587,884,2.587,885,2.587,886,3.91,887,2.587,888,3.91,889,2.587,890,2.587,891,2.587,892,2.587,893,2.587,894,2.587,895,4.713,896,2.587,897,2.587,898,2.587,899,2.587,900,2.587,901,2.587,902,2.587,903,2.587,904,4.713,905,2.587,906,2.587,907,3.91,908,3.91,909,4.713,910,2.587,911,2.587,912,2.587,913,2.587,914,2.223,915,2.587,916,2.587,917,2.587,918,2.587,919,2.587,920,2.587]],["title/guards/RolesGuard.html",[450,2.225,921,2.859]],["body/guards/RolesGuard.html",[0,0.01,3,0.204,4,0.204,5,0.158,9,1.46,12,0.019,14,0.881,16,1.448,17,0.583,18,0.471,19,0.929,22,0.45,24,0.701,25,0.204,30,0.01,31,0.013,32,0.01,35,2.274,37,0.356,38,1.672,45,1.262,58,3.178,173,2.662,213,1.754,266,1.897,267,0.817,272,1.787,314,0.929,353,1.935,354,3.506,381,3.226,450,3.226,616,4.949,619,2.847,620,3.129,622,2.847,922,4.079,923,3.506,924,6.451,925,4.079,926,6.897,927,4.079,928,5.404,929,4.079,930,3.506,931,4.079,932,4.079,933,4.079,934,4.079,935,4.079,936,4.079,937,5.404,938,4.079,939,4.079]],["title/classes/UpdateUserDto.html",[0,0.009,940,2.602]],["body/classes/UpdateUserDto.html",[0,0.013,2,1.241,3,0.165,4,0.165,5,0.128,7,2.172,11,1.015,12,0.019,14,1.126,17,0.733,18,0.603,19,1.204,22,0.463,25,0.165,30,0.008,31,0.011,32,0.008,37,0.288,51,2.055,164,1.376,173,2.301,209,2.01,213,1.761,215,1.451,255,1.241,267,1.295,328,1.725,349,1.672,351,2.112,353,1.942,368,3.851,371,1.445,372,3.002,373,3.002,374,2.788,375,3.002,376,1.624,379,3.002,381,1.968,383,2.522,384,2.12,387,2.906,392,2.906,419,2.788,422,3.002,559,4.513,560,2.302,561,2.302,562,2.302,563,2.302,564,2.302,565,2.302,566,2.302,567,2.302,587,2.302,591,2.53,596,4.16,597,2.835,600,2.835,601,4.662,604,2.53,606,2.53,607,2.12,940,3.26,941,5.07,942,3.298,943,3.298,944,3.298,945,3.298,946,3.298,947,4.671,948,2.53,949,2.53,950,3.298]],["title/classes/User.html",[0,0.009,213,1.21]],["body/classes/User.html",[0,0.014,2,1.717,3,0.229,4,0.229,5,0.177,11,1.213,12,0.018,14,1.134,17,0.69,18,0.607,19,1.158,22,0.339,25,0.229,30,0.011,31,0.014,32,0.011,37,0.398,209,1.981,213,1.887,214,2.289,349,2.289,351,2.289,353,2.289,371,1.798,951,3.922,952,4.563,953,4.563,954,4.563,955,5.978,956,4.563,957,4.563,958,3.922]],["title/classes/UserLoginDto.html",[0,0.009,220,2.602]],["body/classes/UserLoginDto.html",[0,0.014,2,1.685,3,0.224,4,0.224,5,0.174,11,1.09,12,0.019,14,0.936,18,0.501,20,3.005,22,0.427,25,0.224,30,0.011,31,0.014,32,0.011,37,0.391,51,1.971,209,1.957,214,2.533,220,4.009,255,1.685,267,1.418,351,2.394,371,1.777,383,2.671,387,3.123,392,2.829,411,4.009,419,3.428,420,3.126,423,3.126,959,5.45,960,3.85,961,4.479,962,4.479,963,4.479,964,4.479,965,3.85,966,4.479]],["title/controllers/UsersController.html",[195,1.64,967,2.602]],["body/controllers/UsersController.html",[0,0.006,3,0.129,4,0.129,5,0.1,11,1.057,12,0.019,14,0.917,16,1.404,17,0.565,18,0.457,19,0.901,22,0.482,24,0.442,25,0.129,30,0.006,31,0.009,32,0.006,37,0.224,38,1.205,45,1.741,163,2.753,170,2.706,194,1.073,195,1.132,198,1.654,209,1.918,213,2.295,215,2.995,216,4.248,217,3.255,238,1.654,239,2.212,240,2.212,242,3.347,246,1.796,247,1.346,252,1.796,253,4.132,254,2.718,255,0.968,256,2.718,257,2.171,258,1.796,259,1.974,264,2.212,265,2.212,266,1.197,267,0.516,270,3.928,272,1.659,275,1.796,320,2.619,330,2.836,353,0.921,358,2.212,429,2.916,430,4.019,431,2.171,434,1.974,438,1.435,439,1.974,443,1.435,444,2.212,446,1.435,448,1.974,450,2.324,451,1.974,455,1.974,456,1.974,457,1.974,460,4.317,461,2.212,464,1.974,465,1.974,467,1.974,468,1.974,470,1.974,471,2.212,533,1.974,585,3.657,704,3.347,940,4.42,967,2.718,968,2.212,969,4.837,970,2.573,971,2.573,972,3.894,973,2.573,974,2.573,975,2.573,976,2.573,977,2.573,978,2.573,979,2.573,980,2.212,981,2.573,982,2.573,983,3.894,984,2.573,985,2.573,986,2.212,987,2.573,988,2.573,989,2.573,990,2.573,991,2.573,992,2.573]],["title/modules/UsersModule.html",[119,1.334,135,2.225]],["body/modules/UsersModule.html",[0,0.011,3,0.219,4,0.219,5,0.17,12,0.019,17,0.472,22,0.51,24,0.752,25,0.219,30,0.011,31,0.014,32,0.011,119,2.244,121,1.824,122,2.033,123,2.287,124,2.287,125,2.033,126,3.279,127,3.279,135,4.27,136,2.958,137,2.287,138,2.153,140,2.438,149,2.81,150,2.033,160,1.352,194,2.359,205,2.609,213,1.836,320,4.173,479,2.153,480,3.051,481,2.438,967,4.375,980,3.758,993,3.758,994,3.758,995,3.758,996,4.372,997,4.337,998,4.372,999,4.372]],["title/injectables/UsersService.html",[314,0.641,320,2.078]],["body/injectables/UsersService.html",[0,0.005,3,0.102,4,0.102,5,0.079,9,1.162,12,0.019,14,0.984,16,1.512,17,0.632,18,0.469,19,0.97,22,0.46,24,0.35,25,0.102,30,0.005,31,0.008,32,0.005,37,0.178,38,1.004,45,1.812,47,1.215,53,1.215,58,3.048,67,1.781,116,1.135,147,1.421,148,1.75,150,0.947,160,0.63,163,1.51,170,1.781,173,1.599,200,3.105,204,4.192,213,1.901,214,2.019,235,1.309,236,1.562,237,1.421,260,2.49,261,1.421,267,0.408,272,1.825,284,3.243,286,3.978,287,1.562,314,0.558,315,0.729,320,1.81,328,3.416,330,2.39,332,3.626,340,1.215,342,2.79,349,1.653,351,1.653,353,1.162,408,3.97,429,1.599,431,1.81,438,1.81,443,1.81,446,1.81,479,2.275,483,3.224,497,1.421,502,1.75,505,2.79,533,1.562,538,2.266,659,3.224,732,5.688,1000,1.75,1001,4.619,1002,3.246,1003,2.036,1004,2.036,1005,3.246,1006,2.036,1007,2.036,1008,3.246,1009,2.036,1010,2.036,1011,2.036,1012,2.036,1013,3.246,1014,2.036,1015,2.036,1016,2.036,1017,2.036,1018,2.036,1019,2.036,1020,2.036,1021,2.036,1022,2.036,1023,2.036,1024,3.246,1025,2.036,1026,2.036,1027,4.619,1028,5.045,1029,3.246,1030,5.376,1031,4.619,1032,4.619,1033,4.619,1034,4.619,1035,3.246,1036,3.246,1037,2.036,1038,2.036,1039,2.036,1040,2.036,1041,3.246,1042,2.036,1043,2.036,1044,2.036,1045,2.036,1046,2.036,1047,2.036,1048,2.036,1049,2.036,1050,1.75,1051,2.036]],["title/coverage.html",[1052,4.372]],["body/coverage.html",[0,0.016,1,1.543,5,0.086,6,1.901,12,0.019,18,0.193,30,0.005,31,0.008,32,0.005,33,1.696,34,1.901,67,1.525,99,4.586,116,1.233,125,1.028,145,1.696,147,1.543,157,1.32,195,2.311,196,1.543,197,1.901,207,1.421,208,1.421,213,1.125,214,0.792,217,1.089,220,1.543,231,1.543,235,1.421,238,1.421,248,1.233,297,1.421,298,1.421,300,1.543,314,1.159,316,1.901,320,1.233,332,1.421,353,0.792,368,1.233,369,1.901,370,1.901,394,1.32,404,6.005,405,1.901,406,1.901,426,1.543,427,1.901,433,1.543,450,1.32,453,1.813,477,1.696,482,1.901,485,1.233,489,1.543,543,1.901,558,1.901,568,1.543,569,1.901,571,1.32,573,1.543,584,1.901,585,1.543,586,1.901,587,2.982,609,3.277,610,3.277,626,4.029,646,1.696,651,1.901,658,2.085,659,1.543,661,1.901,662,1.901,663,1.901,664,1.696,665,1.901,668,1.421,669,1.901,670,1.901,672,1.543,673,1.901,677,1.32,680,1.901,681,1.901,682,1.901,683,1.543,684,1.696,685,1.901,707,1.901,727,1.901,736,1.901,748,1.696,749,1.901,750,1.901,753,1.543,754,1.696,755,1.901,763,1.543,764,1.901,765,1.901,769,1.901,775,1.543,776,1.901,789,1.543,790,1.901,815,1.543,833,1.32,835,1.696,838,1.696,871,1.696,873,1.901,874,1.901,876,1.901,921,1.696,923,1.901,940,1.543,941,1.901,948,1.696,949,1.696,951,1.901,959,1.901,960,1.901,967,1.543,968,1.901,997,1.696,1000,1.901,1052,1.901,1053,1.696,1054,2.211,1055,2.211,1056,1.901,1057,7.244,1058,5.252,1059,5.571,1060,6.569,1061,1.901,1062,1.901,1063,2.211,1064,5.571,1065,2.211,1066,4.273,1067,1.901,1068,1.901,1069,3.465,1070,2.211,1071,2.211,1072,1.901,1073,1.901,1074,1.901,1075,1.901,1076,1.901,1077,1.901,1078,1.901,1079,1.901,1080,1.901,1081,1.901,1082,1.901,1083,1.901,1084,1.901,1085,1.901,1086,1.901,1087,1.901,1088,1.901,1089,1.901,1090,1.901,1091,1.901,1092,1.901,1093,1.901,1094,1.901,1095,1.901,1096,1.901,1097,1.901,1098,1.901,1099,1.901,1100,1.901,1101,1.901,1102,2.211,1103,2.211]],["title/dependencies.html",[122,2.085,1104,3.113]],["body/dependencies.html",[0,0.013,12,0.019,24,0.661,30,0.009,31,0.013,32,0.009,51,1.691,66,2.948,122,1.787,150,1.787,153,3.304,154,3.304,155,2.683,160,2.097,163,1.787,164,1.603,165,2.471,170,1.691,247,2.011,255,1.446,261,2.683,306,2.948,575,3.304,576,3.304,622,2.683,693,2.683,699,2.948,715,3.781,716,2.948,733,3.304,827,3.304,828,4.105,930,3.304,958,3.304,1105,3.844,1106,3.844,1107,3.844,1108,5.881,1109,3.844,1110,3.844,1111,3.844,1112,5.193,1113,3.844,1114,5.193,1115,3.844,1116,3.844,1117,3.844,1118,3.844,1119,3.844,1120,3.844,1121,3.844,1122,3.844,1123,3.844,1124,3.844,1125,3.844,1126,3.844,1127,3.844,1128,3.844,1129,3.844,1130,3.844,1131,3.844,1132,4.464,1133,3.844,1134,3.844,1135,3.304,1136,3.844,1137,3.844,1138,3.844,1139,3.844,1140,3.844,1141,3.844,1142,3.844,1143,3.844,1144,3.844,1145,3.844,1146,3.304,1147,3.844,1148,3.844,1149,3.844,1150,3.844,1151,3.844,1152,3.844,1153,3.844,1154,3.844,1155,3.844,1156,2.948,1157,3.844,1158,3.844]],["title/miscellaneous/enumerations.html",[1159,1.858,1160,3.853]],["body/miscellaneous/enumerations.html",[12,0.018,30,0.014,31,0.016,32,0.014,37,0.493,77,4.261,213,2.152,596,5.084,607,4.261,1159,3.376,1160,4.862,1161,5.656,1162,5.656]],["title/miscellaneous/functions.html",[1159,1.858,1163,3.853]],["body/miscellaneous/functions.html",[0,0.015,12,0.017,13,3.077,16,1.837,17,0.739,19,1.178,21,3.672,30,0.012,31,0.015,32,0.012,37,0.418,125,3.041,503,3.341,609,3.672,610,5.015,625,5.149,627,4.114,628,5.149,632,4.114,838,4.595,948,4.595,949,3.672,1056,4.114,1080,4.114,1081,5.149,1082,5.149,1083,5.149,1101,5.149,1159,2.857,1163,4.114,1164,4.787,1165,5.99,1166,4.787,1167,4.787,1168,4.787,1169,4.787,1170,5.99,1171,4.787]],["title/index.html",[37,0.272,1172,2.676,1173,2.676]],["body/index.html",[12,0.018,17,0.604,18,0.305,30,0.008,31,0.012,32,0.008,37,0.305,121,1.458,160,1.081,163,2.262,164,1.458,165,2.246,170,2.463,181,3.127,193,4.182,199,2.681,209,1.191,213,1.579,214,2.003,216,2.246,217,2.396,351,2.003,394,2.904,429,2.757,435,2.757,481,1.948,508,3.004,512,3.004,577,4.182,606,2.681,607,3.597,614,4.182,675,2.086,676,3.597,715,2.246,791,5.468,795,2.246,804,3.732,805,3.004,811,4.182,812,3.004,824,4.182,914,3.004,955,3.004,969,3.004,1053,2.681,1132,3.004,1156,3.732,1174,3.495,1175,4.865,1176,3.495,1177,3.495,1178,3.495,1179,3.495,1180,3.495,1181,3.495,1182,3.495,1183,4.81,1184,3.495,1185,4.865,1186,3.495,1187,6.051,1188,3.495,1189,5.596,1190,3.495,1191,3.495,1192,3.495,1193,3.495,1194,3.495,1195,3.495,1196,3.495,1197,3.495,1198,3.495,1199,4.865,1200,3.495,1201,3.495,1202,3.495,1203,4.865,1204,3.495,1205,3.495,1206,3.495,1207,3.495,1208,3.495,1209,3.495,1210,3.004,1211,3.495,1212,4.865,1213,2.681,1214,3.004,1215,3.495,1216,3.495,1217,3.004,1218,4.865,1219,3.495,1220,3.495,1221,3.495,1222,4.865,1223,4.865,1224,3.495,1225,3.495,1226,3.495,1227,3.495,1228,3.495,1229,3.495,1230,3.495,1231,3.495,1232,3.495,1233,3.495,1234,3.495,1235,3.495,1236,3.495,1237,3.495,1238,3.004,1239,3.495,1240,3.495,1241,3.495,1242,3.495,1243,3.495,1244,3.495,1245,3.495,1246,3.495,1247,3.495]],["title/license.html",[1172,2.676,1173,2.676,1213,2.388]],["body/license.html",[12,0.014,30,0.01,31,0.014,32,0.01,138,2.122,175,3.304,186,3.703,828,3.007,1053,3.304,1210,3.703,1213,3.304,1214,3.703,1248,6.223,1249,4.307,1250,4.307,1251,4.307,1252,4.307,1253,4.307,1254,4.307,1255,4.307,1256,5.6,1257,4.307,1258,4.307,1259,4.307,1260,4.307,1261,4.307,1262,5.6,1263,7.306,1264,4.307,1265,4.307,1266,6.223,1267,4.307,1268,5.6,1269,4.307,1270,4.307,1271,4.814,1272,4.307,1273,4.307,1274,4.307,1275,4.307,1276,4.307,1277,4.307,1278,4.307,1279,5.6,1280,4.307,1281,4.307,1282,4.307,1283,4.307,1284,4.307,1285,4.307,1286,4.307,1287,5.6,1288,5.6,1289,4.307,1290,4.307,1291,4.307,1292,4.307,1293,4.307,1294,4.307,1295,4.307,1296,4.307,1297,4.307,1298,4.307,1299,4.307,1300,4.307,1301,4.307,1302,4.307,1303,4.307,1304,4.307,1305,4.307,1306,4.307,1307,4.307,1308,4.307,1309,4.307,1310,4.307,1311,4.307,1312,4.307,1313,4.307,1314,4.307,1315,4.307,1316,4.307]],["title/modules.html",[121,2.121]],["body/modules.html",[12,0.015,30,0.013,31,0.015,32,0.013,120,3.651,121,2.182,130,3.363,131,3.363,132,3.363,133,3.123,134,3.363,135,3.123,1317,7.44,1318,7.44,1319,7.44,1320,7.44]],["title/overview.html",[1321,4.372]],["body/overview.html",[2,1.402,12,0.018,30,0.009,31,0.012,32,0.009,119,1.334,120,5.163,121,1.554,122,1.733,123,1.949,124,1.949,125,1.733,126,1.949,127,1.949,128,3.203,129,3.203,130,4.695,131,4.184,132,4.184,133,4.01,134,4.184,135,4.104,136,2.66,137,1.949,138,1.835,194,1.554,248,3.833,293,3.203,295,3.203,296,3.203,297,3.721,298,3.721,315,1.334,320,3.833,453,3.028,473,3.203,474,3.203,485,3.833,542,2.395,571,3.455,579,3.203,580,3.203,643,3.203,644,3.203,645,3.203,660,1.949,743,3.203,833,3.455,867,3.203,868,3.203,921,2.858,993,3.203,994,3.203,995,3.203,1321,3.203,1322,5.085,1323,3.203,1324,3.726]],["title/miscellaneous/variables.html",[1159,1.858,1325,3.853]],["body/miscellaneous/variables.html",[1,1.226,5,0.142,11,0.986,12,0.019,13,3.795,17,0.505,18,0.605,20,0.919,30,0.004,31,0.007,32,0.004,37,0.153,41,1.51,61,1.348,67,2.847,77,4.296,99,1.049,102,1.51,116,2.042,145,2.21,147,2.011,160,0.544,164,1.202,165,1.13,173,3.096,175,1.348,184,1.51,213,1.189,214,1.984,215,0.773,217,0.866,235,1.852,272,0.85,300,2.011,310,1.51,312,1.51,328,1.916,330,1.45,349,0.629,351,1.517,353,1.799,374,1.049,376,0.866,415,1.51,425,2.011,428,1.348,429,0.866,477,2.21,481,2.608,511,1.51,542,1.852,573,2.011,607,2.724,666,1.226,667,1.226,671,1.348,674,1.226,675,1.72,676,1.13,697,2.81,715,1.13,716,1.348,721,1.51,722,3.149,742,1.51,773,5.745,783,1.51,828,1.226,835,2.21,853,2.477,871,2.21,965,1.51,986,1.51,997,2.21,1050,1.51,1061,1.51,1062,1.51,1067,1.51,1068,1.51,1072,1.51,1073,1.51,1074,1.51,1075,2.477,1076,2.477,1077,1.51,1078,1.51,1079,1.51,1084,1.51,1085,1.51,1086,2.477,1087,2.477,1088,1.51,1089,2.477,1090,2.477,1091,1.51,1092,1.51,1093,1.51,1094,2.477,1095,2.477,1096,1.51,1097,2.477,1098,1.51,1099,2.477,1100,3.149,1135,2.477,1146,2.477,1156,1.348,1159,1.049,1183,2.477,1217,1.51,1238,1.51,1271,1.51,1323,2.477,1325,1.51,1326,1.757,1327,1.757,1328,1.757,1329,1.757,1330,1.757,1331,1.757,1332,1.757,1333,1.757,1334,1.757,1335,1.757,1336,1.757,1337,1.757,1338,1.757,1339,1.757,1340,1.757,1341,1.757,1342,1.757,1343,1.757,1344,1.757,1345,4.237,1346,1.757,1347,1.757,1348,1.757,1349,1.757,1350,2.882,1351,1.757,1352,1.757,1353,1.757,1354,1.757,1355,1.757,1356,1.757,1357,1.757,1358,1.757,1359,1.757,1360,1.757,1361,2.882,1362,1.757,1363,1.757,1364,1.757,1365,1.757,1366,1.757,1367,1.757,1368,1.757,1369,1.757,1370,1.757,1371,1.757,1372,1.757,1373,1.757,1374,1.757,1375,1.757,1376,3.663,1377,1.757,1378,1.757,1379,2.882,1380,6.048,1381,1.757,1382,1.757,1383,1.757,1384,1.757,1385,4.237,1386,1.757,1387,1.757,1388,1.757,1389,1.757,1390,1.757,1391,1.757,1392,1.757,1393,1.757,1394,1.757,1395,1.757,1396,1.757,1397,1.757,1398,2.882,1399,2.882,1400,5.026,1401,1.757,1402,1.757,1403,2.882,1404,1.757,1405,1.757,1406,2.882,1407,1.757,1408,1.757,1409,2.882,1410,1.757,1411,1.757,1412,1.757,1413,1.757,1414,1.757,1415,1.757,1416,1.757,1417,1.757,1418,1.757,1419,1.757,1420,2.882,1421,3.663,1422,1.757,1423,1.757,1424,1.757,1425,1.757,1426,1.757,1427,2.882,1428,1.757,1429,1.757,1430,1.757,1431,1.757,1432,1.757,1433,1.757,1434,1.757,1435,1.757,1436,1.757,1437,1.757,1438,2.882,1439,1.757,1440,1.757,1441,1.757,1442,1.757,1443,1.757,1444,1.757,1445,1.757,1446,1.757,1447,1.757,1448,1.757,1449,2.882,1450,2.882,1451,1.757,1452,3.663,1453,1.757,1454,1.757,1455,1.757,1456,1.757,1457,1.757,1458,1.757,1459,1.757,1460,1.757,1461,1.757,1462,1.757,1463,2.882,1464,1.757,1465,1.757,1466,1.757,1467,1.757,1468,1.757]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/CreateUserDto.html":{},"injectables/DeleteFieldsInterceptor.html":{},"modules/ElasticSearchModule.html":{},"injectables/ElasticSearchService.html":{},"interfaces/IChangePassword.html":{},"interfaces/ICity.html":{},"interfaces/ILocation.html":{},"interfaces/IMongoPoint.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LocationDto.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":99,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BaseDtoClass.html":{},"injectables/CitiesService.html":{},"injectables/RestaurantsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.7",{"_index":1110,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["0.11.0",{"_index":1122,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":1121,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1148,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1142,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1145,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1057,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1066,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1063,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1070,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1064,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1060,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1069,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1071,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1058,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1059,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1065,"title":{},"body":{"coverage.html":{}}}],["000000000000000000000000",{"_index":393,"title":{},"body":{"classes/BaseDtoClass.html":{},"classes/RestaurantDto.html":{}}}],["000000000000000000000000'})@ismongoid",{"_index":777,"title":{},"body":{"classes/RestaurantDto.html":{}}}],["1",{"_index":542,"title":{"injectables/CitiesService-1.html":{}},"body":{"injectables/DeleteFieldsInterceptor.html":{},"injectables/RestaurantsService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0",{"_index":1466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1150,"title":{},"body":{"dependencies.html":{}}}],["1.0.2",{"_index":1114,"title":{},"body":{"dependencies.html":{}}}],["1.1.1",{"_index":1147,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":1129,"title":{},"body":{"dependencies.html":{}}}],["1.4.4",{"_index":1127,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":1124,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1000",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10000",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1024",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11000",{"_index":105,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["11001].indexof(exception.code",{"_index":106,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["13",{"_index":743,"title":{},"body":{"classes/LocationDto.html":{},"overview.html":{}}}],["13})@isnumber()@min(undefined)@max(180",{"_index":739,"title":{},"body":{"classes/LocationDto.html":{}}}],["13})@isnumber()@min(undefined)@max(90",{"_index":737,"title":{},"body":{"classes/LocationDto.html":{}}}],["14",{"_index":1324,"title":{},"body":{"overview.html":{}}}],["15",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16.1.8",{"_index":1107,"title":{},"body":{"dependencies.html":{}}}],["16.5.0",{"_index":1133,"title":{},"body":{"dependencies.html":{}}}],["180",{"_index":744,"title":{},"body":{"classes/LocationDto.html":{}}}],["2.10.1",{"_index":1120,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1117,"title":{},"body":{"dependencies.html":{}}}],["201",{"_index":984,"title":{},"body":{"controllers/UsersController.html":{}}}],["2019",{"_index":1250,"title":{},"body":{"license.html":{}}}],["24",{"_index":398,"title":{},"body":{"classes/BaseDtoClass.html":{}}}],["3.0.0",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["3.21.2",{"_index":1138,"title":{},"body":{"dependencies.html":{}}}],["3600000",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1149,"title":{},"body":{"dependencies.html":{}}}],["4.0.9",{"_index":1115,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1158,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":1116,"title":{},"body":{"dependencies.html":{}}}],["4.5.1",{"_index":1140,"title":{},"body":{"dependencies.html":{}}}],["403",{"_index":987,"title":{},"body":{"controllers/UsersController.html":{}}}],["404",{"_index":103,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["45",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["45000",{"_index":1440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":1323,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["5.0.0",{"_index":1136,"title":{},"body":{"dependencies.html":{}}}],["5.7.13",{"_index":1141,"title":{},"body":{"dependencies.html":{}}}],["5.8.0",{"_index":1144,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["500).json(jsonres",{"_index":118,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["500ms",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5242880",{"_index":1395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":411,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/UserLoginDto.html":{}}}],["6.1.1",{"_index":1112,"title":{},"body":{"dependencies.html":{}}}],["6.1.2",{"_index":1113,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":1155,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":1108,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["604800000",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":1322,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":1111,"title":{},"body":{"dependencies.html":{}}}],["7.5.0",{"_index":1106,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":1131,"title":{},"body":{"dependencies.html":{}}}],["9,a",{"_index":396,"title":{},"body":{"classes/BaseDtoClass.html":{}}}],["90",{"_index":746,"title":{},"body":{"classes/LocationDto.html":{}}}],["__v",{"_index":372,"title":{},"body":{"classes/BaseDtoClass.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{}}}],["_doc",{"_index":1026,"title":{},"body":{"injectables/UsersService.html":{}}}],["_id",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"injectables/ElasticSearchService.html":{},"interfaces/IUserJWT.html":{},"injectables/JwtStrategy.html":{},"classes/RestaurantDto.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["abcd123456",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["above",{"_index":1286,"title":{},"body":{"license.html":{}}}],["accepted",{"_index":28,"title":{},"body":{"classes/AcceptedException.html":{}}}],["acceptedexception",{"_index":1,"title":{"classes/AcceptedException.html":{}},"body":{"classes/AcceptedException.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["account",{"_index":1049,"title":{},"body":{"injectables/UsersService.html":{}}}],["acl",{"_index":1230,"title":{},"body":{"index.html":{}}}],["action",{"_index":1311,"title":{},"body":{"license.html":{}}}],["activate",{"_index":1218,"title":{},"body":{"index.html":{}}}],["add",{"_index":1189,"title":{},"body":{"index.html":{}}}],["addfields",{"_index":911,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["admin",{"_index":607,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["adminexists",{"_index":1041,"title":{},"body":{"injectables/UsersService.html":{}}}],["ahead",{"_index":1191,"title":{},"body":{"index.html":{}}}],["al",{"_index":1254,"title":{},"body":{"license.html":{}}}],["alexandria",{"_index":501,"title":{},"body":{"injectables/CitiesService.html":{}}}],["allexceptionsfilter",{"_index":33,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allowed",{"_index":1369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alphanumeric",{"_index":400,"title":{},"body":{"classes/BaseDtoClass.html":{}}}],["and/or",{"_index":1277,"title":{},"body":{"license.html":{}}}],["angular",{"_index":1233,"title":{},"body":{"index.html":{}}}],["anymap",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":1183,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["apibody",{"_index":830,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["apiconsumes",{"_index":829,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["apiconsumes('multipart/form",{"_index":847,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["apioperation",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":387,"title":{},"body":{"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LocationDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"classes/RestaurantsSearchDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserLoginDto.html":{}}}],["apiproperty({example",{"_index":383,"title":{},"body":{"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/LocationDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"classes/RestaurantsSearchDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserLoginDto.html":{}}}],["apiproperty({isarray",{"_index":597,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({type",{"_index":781,"title":{},"body":{"classes/RestaurantDto.html":{}}}],["apiresponse",{"_index":983,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('cities",{"_index":458,"title":{},"body":{"controllers/CitiesController.html":{}}}],["apitags('restaurants",{"_index":842,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["apitags('users",{"_index":981,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["appmodule",{"_index":120,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["architecture",{"_index":1204,"title":{},"body":{"index.html":{}}}],["argumentmetadata",{"_index":694,"title":{},"body":{"injectables/JoiValidatorPipe.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{}}}],["argumentshost",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["arising",{"_index":1315,"title":{},"body":{"license.html":{}}}],["array",{"_index":631,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["array.isarray(data",{"_index":633,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["array.isarray(exception.message.message",{"_index":91,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["array.isarray(this.fields",{"_index":638,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["arraycontains",{"_index":602,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["arraycontains(['user",{"_index":608,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["arrayelemat",{"_index":907,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["arraynotempty",{"_index":603,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["arrayunique",{"_index":947,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["associated",{"_index":1264,"title":{},"body":{"license.html":{}}}],["async",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ElasticSearchService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"modules/ElasticSearchModule.html":{},"index.html":{}}}],["auth.controller",{"_index":302,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/interfaces/change",{"_index":1018,"title":{},"body":{"injectables/UsersService.html":{}}}],["authcontroller",{"_index":196,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":1185,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["authmodule",{"_index":130,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authorization",{"_index":1186,"title":{},"body":{"index.html":{}}}],["authorized",{"_index":416,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["authors",{"_index":1304,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":248,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authuser",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["autoindex",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["automatically",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["await",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ElasticSearchService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["badrequestexception",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["base",{"_index":1229,"title":{},"body":{"index.html":{}}}],["basedtoclass",{"_index":368,"title":{"classes/BaseDtoClass.html":{}},"body":{"classes/BaseDtoClass.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["basedtoclass:14",{"_index":561,"title":{},"body":{"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{}}}],["basedtoclass:23",{"_index":560,"title":{},"body":{"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{}}}],["basedtoclass:31",{"_index":564,"title":{},"body":{"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{}}}],["basedtoclass:33",{"_index":563,"title":{},"body":{"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{}}}],["basedtoclass:35",{"_index":562,"title":{},"body":{"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{}}}],["basedtoclass:36",{"_index":565,"title":{},"body":{"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{}}}],["basepath",{"_index":1461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcryptjs",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcryptoptions",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bcryptoptions.rounds",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["bearer",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["bigger",{"_index":1367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["binary",{"_index":783,"title":{},"body":{"classes/RestaurantDto.html":{},"miscellaneous/variables.html":{}}}],["bitmap",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CitiesController.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["body.image",{"_index":851,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["body.latitude",{"_index":762,"title":{},"body":{"injectables/ObjectToMongoPointPipe.html":{}}}],["body.longitude",{"_index":761,"title":{},"body":{"injectables/ObjectToMongoPointPipe.html":{}}}],["body[this.propertyname",{"_index":706,"title":{},"body":{"injectables/JoiValidatorPipe.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{}}}],["body[this.propertyname].latitude",{"_index":760,"title":{},"body":{"injectables/ObjectToMongoPointPipe.html":{}}}],["body[this.propertyname].longitude",{"_index":759,"title":{},"body":{"injectables/ObjectToMongoPointPipe.html":{}}}],["boilerplate",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":381,"title":{},"body":{"classes/BaseDtoClass.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{}}}],["bootstrap",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"modules/ElasticSearchModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1320,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1317,"title":{},"body":{"modules.html":{}}}],["buffermaxentries",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":1217,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["building",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bytes",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["c",{"_index":1249,"title":{},"body":{"license.html":{}}}],["cache",{"_index":1118,"title":{},"body":{"dependencies.html":{}}}],["cai",{"_index":518,"title":{},"body":{"injectables/CitiesService.html":{}}}],["callhandler",{"_index":617,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{},"injectables/MongoPointToObjectInterceptor.html":{}}}],["canactivate",{"_index":924,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":928,"title":{},"body":{"guards/RolesGuard.html":{}}}],["catch",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["catch(exception",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["change",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["changedpassworduser",{"_index":1033,"title":{},"body":{"injectables/UsersService.html":{}}}],["changepassword",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["changepassword(authuser",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["changepassword(id",{"_index":1006,"title":{},"body":{"injectables/UsersService.html":{}}}],["changepassword(user",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassworddto",{"_index":208,"title":{"classes/ChangePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["changes",{"_index":1220,"title":{},"body":{"index.html":{}}}],["charge",{"_index":1259,"title":{},"body":{"license.html":{}}}],["cities",{"_index":428,"title":{},"body":{"controllers/CitiesController.html":{},"injectables/RestaurantsService.html":{},"miscellaneous/variables.html":{}}}],["cities.controller",{"_index":476,"title":{},"body":{"modules/CitiesModule.html":{}}}],["cities.service",{"_index":454,"title":{},"body":{"controllers/CitiesController.html":{},"modules/CitiesModule.html":{}}}],["citiescontroller",{"_index":426,"title":{"controllers/CitiesController.html":{}},"body":{"controllers/CitiesController.html":{},"modules/CitiesModule.html":{},"coverage.html":{}}}],["citiesmodule",{"_index":131,"title":{"modules/CitiesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CitiesModule.html":{},"modules.html":{},"overview.html":{}}}],["citiesservice",{"_index":453,"title":{"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{}},"body":{"controllers/CitiesController.html":{},"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"coverage.html":{},"overview.html":{}}}],["city",{"_index":435,"title":{},"body":{"controllers/CitiesController.html":{},"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"modules/CountriesModule.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"index.html":{}}}],["city.__v",{"_index":915,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["citydto",{"_index":433,"title":{"classes/CityDto.html":{}},"body":{"controllers/CitiesController.html":{},"classes/CityDto.html":{},"coverage.html":{}}}],["cityid",{"_index":674,"title":{},"body":{"interfaces/IRestaurant.html":{},"classes/RestaurantDto.html":{},"injectables/RestaurantsService.html":{},"miscellaneous/variables.html":{}}}],["citymodel",{"_index":487,"title":{},"body":{"injectables/CitiesService.html":{}}}],["citymodel.create",{"_index":500,"title":{},"body":{"injectables/CitiesService.html":{}}}],["citymodel.createmapping((err",{"_index":504,"title":{},"body":{"injectables/CitiesService.html":{}}}],["citymodel.find",{"_index":525,"title":{},"body":{"injectables/CitiesService.html":{}}}],["citymodel.search",{"_index":515,"title":{},"body":{"injectables/CitiesService.html":{}}}],["citymodel.synchronize",{"_index":507,"title":{},"body":{"injectables/CitiesService.html":{}}}],["cityschema",{"_index":477,"title":{},"body":{"modules/CitiesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claim",{"_index":1307,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/LocationDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"classes/RestaurantsSearchDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{}},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/CreateUserDto.html":{},"injectables/DeleteFieldsInterceptor.html":{},"modules/ElasticSearchModule.html":{},"injectables/ElasticSearchService.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LocationDto.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/LocationDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"classes/RestaurantsSearchDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"overview.html":{}}}],["classes/user",{"_index":1017,"title":{},"body":{"injectables/UsersService.html":{}}}],["classvalidatoroptions",{"_index":1087,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["clear",{"_index":1203,"title":{},"body":{"index.html":{}}}],["close",{"_index":1441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":293,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":295,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":294,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":296,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_citiesmodule",{"_index":473,"title":{},"body":{"modules/CitiesModule.html":{},"overview.html":{}}}],["cluster_citiesmodule_providers",{"_index":474,"title":{},"body":{"modules/CitiesModule.html":{},"overview.html":{}}}],["cluster_countriesmodule",{"_index":579,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_countriesmodule_providers",{"_index":580,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_elasticsearchmodule",{"_index":643,"title":{},"body":{"modules/ElasticSearchModule.html":{},"overview.html":{}}}],["cluster_elasticsearchmodule_exports",{"_index":644,"title":{},"body":{"modules/ElasticSearchModule.html":{},"overview.html":{}}}],["cluster_elasticsearchmodule_providers",{"_index":645,"title":{},"body":{"modules/ElasticSearchModule.html":{},"overview.html":{}}}],["cluster_restaurantsmodule",{"_index":867,"title":{},"body":{"modules/RestaurantsModule.html":{},"overview.html":{}}}],["cluster_restaurantsmodule_providers",{"_index":868,"title":{},"body":{"modules/RestaurantsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":993,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":994,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":995,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmu",{"_index":1381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cmx",{"_index":1383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cod",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["company",{"_index":1180,"title":{},"body":{"index.html":{}}}],["compare",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["compare(userlogin.password",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["complete",{"_index":1224,"title":{},"body":{"index.html":{}}}],["compression",{"_index":1123,"title":{},"body":{"dependencies.html":{}}}],["conditions",{"_index":1285,"title":{},"body":{"license.html":{}}}],["config",{"_index":1236,"title":{},"body":{"index.html":{}}}],["confirm",{"_index":425,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterNewUserDto.html":{},"miscellaneous/variables.html":{}}}],["confirmnewpassword",{"_index":407,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["confirmpassword",{"_index":588,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterNewUserDto.html":{}}}],["connected",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["connections",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connecttimeoutms",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consider",{"_index":1199,"title":{},"body":{"index.html":{}}}],["console.log",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CitiesService.html":{},"controllers/CountriesController.html":{},"injectables/ElasticSearchService.html":{},"classes/RestaurantDto.html":{},"injectables/UsersService.html":{}}}],["console.log('error",{"_index":527,"title":{},"body":{"injectables/CitiesService.html":{}}}],["console.log('mapping",{"_index":532,"title":{},"body":{"injectables/CitiesService.html":{}}}],["console.log(elasticsearchservice",{"_index":499,"title":{},"body":{"injectables/CitiesService.html":{}}}],["console.log(err",{"_index":531,"title":{},"body":{"injectables/CitiesService.html":{}}}],["console.log(mapping",{"_index":534,"title":{},"body":{"injectables/CitiesService.html":{}}}],["console.log(this.model",{"_index":552,"title":{},"body":{"injectables/CitiesService-1.html":{}}}],["const",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/CitiesService.html":{},"injectables/DeleteFieldsInterceptor.html":{},"injectables/ElasticSearchService.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["constants",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["constants.admin.email",{"_index":1046,"title":{},"body":{"injectables/UsersService.html":{}}}],["constants.admin.name",{"_index":1045,"title":{},"body":{"injectables/UsersService.html":{}}}],["constants.admin.password",{"_index":1043,"title":{},"body":{"injectables/UsersService.html":{}}}],["constants.admin.roles",{"_index":1047,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor",{"_index":9,"title":{},"body":{"classes/AcceptedException.html":{},"injectables/AuthService.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"injectables/DeleteFieldsInterceptor.html":{},"modules/ElasticSearchModule.html":{},"injectables/ElasticSearchService.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":728,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(citymodel",{"_index":484,"title":{},"body":{"injectables/CitiesService.html":{}}}],["constructor(elasticsearchservice",{"_index":652,"title":{},"body":{"injectables/ElasticSearchService.html":{}}}],["constructor(fields",{"_index":612,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["constructor(jwtservice",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(message",{"_index":10,"title":{},"body":{"classes/AcceptedException.html":{}}}],["constructor(model",{"_index":544,"title":{},"body":{"injectables/CitiesService-1.html":{}}}],["constructor(private",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CitiesController.html":{},"injectables/DeleteFieldsInterceptor.html":{},"injectables/ElasticSearchService.html":{},"injectables/LocalStrategy.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"controllers/RestaurantsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(propertyname",{"_index":687,"title":{},"body":{"injectables/JoiValidatorPipe.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{}}}],["constructor(reflector",{"_index":925,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(restaurantmodel",{"_index":877,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["constructor(usermodel",{"_index":1003,"title":{},"body":{"injectables/UsersService.html":{}}}],["context",{"_index":619,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"classes/RestaurantDto.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":933,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":935,"title":{},"body":{"guards/RolesGuard.html":{}}}],["contract",{"_index":1312,"title":{},"body":{"license.html":{}}}],["controller",{"_index":195,"title":{"controllers/AuthController.html":{},"controllers/CitiesController.html":{},"controllers/CountriesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CitiesController.html":{},"controllers/CountriesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('cities",{"_index":459,"title":{},"body":{"controllers/CitiesController.html":{}}}],["controller('countries",{"_index":578,"title":{},"body":{"controllers/CountriesController.html":{}}}],["controller('restaurants",{"_index":843,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["controller('users",{"_index":982,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CitiesController.html":{},"modules/CitiesModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":1125,"title":{},"body":{"dependencies.html":{}}}],["coordinates",{"_index":671,"title":{},"body":{"interfaces/IMongoPoint.html":{},"injectables/ObjectToMongoPointPipe.html":{},"miscellaneous/variables.html":{}}}],["copies",{"_index":1279,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1262,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1248,"title":{},"body":{"license.html":{}}}],["count",{"_index":508,"title":{},"body":{"injectables/CitiesService.html":{},"index.html":{}}}],["countries",{"_index":570,"title":{},"body":{"controllers/CountriesController.html":{}}}],["countries.controller",{"_index":582,"title":{},"body":{"modules/CountriesModule.html":{}}}],["countries.service",{"_index":572,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{}}}],["countriescontroller",{"_index":568,"title":{"controllers/CountriesController.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"coverage.html":{}}}],["countriesmodule",{"_index":132,"title":{"modules/CountriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules.html":{},"overview.html":{}}}],["countriesservice",{"_index":571,"title":{"injectables/CountriesService.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"coverage.html":{},"overview.html":{}}}],["country",{"_index":583,"title":{},"body":{"modules/CountriesModule.html":{}}}],["countryschema",{"_index":573,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":1052,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":429,"title":{},"body":{"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":461,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/UsersController.html":{}}}],["create(city",{"_index":488,"title":{},"body":{"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{}}}],["create(createcitydto",{"_index":432,"title":{},"body":{"controllers/CitiesController.html":{}}}],["create(createduserdto",{"_index":970,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(image",{"_index":794,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["create(restaurant",{"_index":880,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["create(user",{"_index":1008,"title":{},"body":{"injectables/UsersService.html":{}}}],["createadminifnotexists",{"_index":1001,"title":{},"body":{"injectables/UsersService.html":{}}}],["createcitydto",{"_index":437,"title":{},"body":{"controllers/CitiesController.html":{}}}],["created",{"_index":533,"title":{},"body":{"injectables/CitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createdat",{"_index":373,"title":{},"body":{"classes/BaseDtoClass.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{}}}],["createduser",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["createduserdto",{"_index":972,"title":{},"body":{"controllers/UsersController.html":{}}}],["createparamdecorator((data",{"_index":1467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuserdto",{"_index":585,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["creating",{"_index":528,"title":{},"body":{"injectables/CitiesService.html":{}}}],["crud",{"_index":575,"title":{},"body":{"controllers/CountriesController.html":{},"dependencies.html":{}}}],["csurf",{"_index":1128,"title":{},"body":{"dependencies.html":{}}}],["ctx",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.getrequest",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.getresponse",{"_index":64,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["custom",{"_index":1050,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["damages",{"_index":1308,"title":{},"body":{"license.html":{}}}],["data",{"_index":503,"title":{},"body":{"injectables/CitiesService.html":{},"injectables/DeleteFieldsInterceptor.html":{},"controllers/RestaurantsController.html":{},"miscellaneous/functions.html":{}}}],["data')@apibody({type",{"_index":797,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["data.map(object",{"_index":634,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["date",{"_index":379,"title":{},"body":{"classes/BaseDtoClass.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{}}}],["date().toisostring",{"_index":68,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["date.now",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["db",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["deal",{"_index":1265,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1316,"title":{},"body":{"license.html":{}}}],["decide",{"_index":630,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["declarations",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"modules/ElasticSearchModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/LocationDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"classes/RestaurantsSearchDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["default",{"_index":773,"title":{},"body":{"classes/RegisterNewUserDto.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":14,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"injectables/DeleteFieldsInterceptor.html":{},"injectables/ElasticSearchService.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LocationDto.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"injectables/DeleteFieldsInterceptor.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["delete(':_id",{"_index":467,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["delete(':_id')@roles('admin')@apioperation({summary",{"_index":439,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["delete(@param('_id",{"_index":468,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["delete(id",{"_index":438,"title":{},"body":{"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleted",{"_index":374,"title":{},"body":{"classes/BaseDtoClass.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["deletedat",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["deletedsuccessfully",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletefieldsinterceptor",{"_index":238,"title":{"injectables/DeleteFieldsInterceptor.html":{}},"body":{"controllers/AuthController.html":{},"injectables/DeleteFieldsInterceptor.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["deletefieldsinterceptor('password",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["deletefromarrayofsingleobject",{"_index":1082,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["deletefromarrayofsingleobject(data",{"_index":632,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{},"miscellaneous/functions.html":{}}}],["deleting",{"_index":1083,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["deleting(data",{"_index":635,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["deleting(object",{"_index":627,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{},"miscellaneous/functions.html":{}}}],["dependencies",{"_index":122,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"modules/ElasticSearchModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1209,"title":{},"body":{"index.html":{}}}],["description",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["dest",{"_index":845,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["destruct",{"_index":81,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["development",{"_index":1177,"title":{},"body":{"index.html":{}}}],["din",{"_index":1255,"title":{},"body":{"license.html":{}}}],["distribute",{"_index":1275,"title":{},"body":{"license.html":{}}}],["district",{"_index":1247,"title":{},"body":{"index.html":{}}}],["doc",{"_index":522,"title":{},"body":{"injectables/CitiesService.html":{}}}],["doc._id",{"_index":523,"title":{},"body":{"injectables/CitiesService.html":{}}}],["doc._source",{"_index":524,"title":{},"body":{"injectables/CitiesService.html":{}}}],["document",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseDtoClass.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICity.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["document'})@isnotempty",{"_index":384,"title":{},"body":{"classes/BaseDtoClass.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{}}}],["documentation",{"_index":1053,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["documentnotfound",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documents",{"_index":512,"title":{},"body":{"injectables/CitiesService.html":{},"index.html":{}}}],["dotenv",{"_index":1130,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/RestaurantsController.html":{}}}],["dto.class",{"_index":567,"title":{},"body":{"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{}}}],["dto.class.ts",{"_index":370,"title":{},"body":{"classes/BaseDtoClass.html":{},"coverage.html":{}}}],["dto.class.ts:14",{"_index":378,"title":{},"body":{"classes/BaseDtoClass.html":{}}}],["dto.class.ts:23",{"_index":377,"title":{},"body":{"classes/BaseDtoClass.html":{}}}],["dto.class.ts:31",{"_index":385,"title":{},"body":{"classes/BaseDtoClass.html":{}}}],["dto.class.ts:33",{"_index":382,"title":{},"body":{"classes/BaseDtoClass.html":{}}}],["dto.class.ts:35",{"_index":380,"title":{},"body":{"classes/BaseDtoClass.html":{}}}],["dto.class.ts:36",{"_index":386,"title":{},"body":{"classes/BaseDtoClass.html":{}}}],["dto.ts",{"_index":406,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["dto.ts:11",{"_index":418,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["dto.ts:18",{"_index":413,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["dto.ts:25",{"_index":412,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["dto/change",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/city.dto",{"_index":452,"title":{},"body":{"controllers/CitiesController.html":{}}}],["dto/create",{"_index":979,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/location.dto",{"_index":679,"title":{},"body":{"interfaces/IRestaurant.html":{},"controllers/RestaurantsController.html":{}}}],["dto/register",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/restaurant.dto",{"_index":831,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["dto/search",{"_index":822,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["dto/update",{"_index":978,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/user",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["dummy",{"_index":1205,"title":{},"body":{"index.html":{}}}],["duplication",{"_index":107,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["each",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eg",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["elastic",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"modules/ElasticSearchModule.html":{}}}],["elastic/elasticsearch",{"_index":1105,"title":{},"body":{"dependencies.html":{}}}],["elasticsearch",{"_index":1132,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["elasticsearchmodule",{"_index":133,"title":{"modules/ElasticSearchModule.html":{}},"body":{"modules/AppModule.html":{},"injectables/CitiesService.html":{},"modules/ElasticSearchModule.html":{},"modules.html":{},"overview.html":{}}}],["elasticsearchmodule.register",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"modules/ElasticSearchModule.html":{}}}],["elasticsearchoptions",{"_index":1090,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["elasticsearchservice",{"_index":485,"title":{"injectables/ElasticSearchService.html":{}},"body":{"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"modules/ElasticSearchModule.html":{},"injectables/ElasticSearchService.html":{},"coverage.html":{},"overview.html":{}}}],["elasticsearchservice.search",{"_index":654,"title":{},"body":{"injectables/ElasticSearchService.html":{}}}],["email",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["endpoint",{"_index":1193,"title":{},"body":{"index.html":{}}}],["enum",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum/roles.enums",{"_index":600,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["enumerations",{"_index":1160,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":502,"title":{},"body":{"injectables/CitiesService.html":{},"injectables/UsersService.html":{}}}],["error",{"_index":71,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/JoiValidatorPipe.html":{}}}],["error.details[0].context.key",{"_index":702,"title":{},"body":{"injectables/JoiValidatorPipe.html":{}}}],["error.details[0].context.value",{"_index":703,"title":{},"body":{"injectables/JoiValidatorPipe.html":{}}}],["error.details[0].message",{"_index":701,"title":{},"body":{"injectables/JoiValidatorPipe.html":{}}}],["erroratsynchronizemongoose",{"_index":514,"title":{},"body":{"injectables/CitiesService.html":{}}}],["errors",{"_index":116,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errors.deletedsuccessfully",{"_index":1038,"title":{},"body":{"injectables/UsersService.html":{}}}],["errors.documentnotfound",{"_index":1032,"title":{},"body":{"injectables/UsersService.html":{}}}],["errors.invalidemailorpassword",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["errors.invalidnewpassconfirmation",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["errors.invalidpassword",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["errors.invalidpasswordconfirmation",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["es_indexed",{"_index":1346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["event",{"_index":1303,"title":{},"body":{"license.html":{}}}],["example",{"_index":392,"title":{},"body":{"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LocationDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"classes/RestaurantsSearchDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserLoginDto.html":{}}}],["exception",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.constructor.name",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":79,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.message",{"_index":80,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.message.hasownproperty(property",{"_index":84,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.message.message[0",{"_index":92,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.message.message[0].constraints",{"_index":98,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.message.message[0].property",{"_index":94,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.message.message[0].value",{"_index":96,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.message[property",{"_index":86,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.status",{"_index":74,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionconstructorname",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exclude",{"_index":955,"title":{},"body":{"classes/User.html":{},"index.html":{}}}],["executioncontext",{"_index":616,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"guards/RolesGuard.html":{}}}],["exists",{"_index":1207,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":25,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/CreateUserDto.html":{},"injectables/DeleteFieldsInterceptor.html":{},"modules/ElasticSearchModule.html":{},"injectables/ElasticSearchService.html":{},"interfaces/IChangePassword.html":{},"interfaces/ICity.html":{},"interfaces/ILocation.html":{},"interfaces/IMongoPoint.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LocationDto.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"modules/ElasticSearchModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":828,"title":{},"body":{"controllers/RestaurantsController.html":{},"dependencies.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["extend",{"_index":1243,"title":{},"body":{"index.html":{}}}],["extends",{"_index":7,"title":{},"body":{"classes/AcceptedException.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICity.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":713,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":720,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["f",{"_index":397,"title":{},"body":{"classes/BaseDtoClass.html":{}}}],["false",{"_index":722,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["field",{"_index":625,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{},"miscellaneous/functions.html":{}}}],["fieldname",{"_index":628,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{},"miscellaneous/functions.html":{}}}],["fields",{"_index":614,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{},"index.html":{}}}],["fields.interceptor",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["fields.interceptor.ts",{"_index":610,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["fields.interceptor.ts:28",{"_index":613,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["fields.interceptor.ts:31",{"_index":618,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/CreateUserDto.html":{},"injectables/DeleteFieldsInterceptor.html":{},"modules/ElasticSearchModule.html":{},"injectables/ElasticSearchService.html":{},"interfaces/IChangePassword.html":{},"interfaces/ICity.html":{},"interfaces/ILocation.html":{},"interfaces/IMongoPoint.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LocationDto.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["file.ts",{"_index":1081,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["fileinterceptor",{"_index":826,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["files",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"license.html":{}}}],["filesupload",{"_index":1076,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["finaluserobj",{"_index":1031,"title":{},"body":{"injectables/UsersService.html":{}}}],["find",{"_index":811,"title":{},"body":{"controllers/RestaurantsController.html":{},"index.html":{}}}],["findall",{"_index":430,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["findone",{"_index":1035,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneanddelete",{"_index":1037,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneandupdate",{"_index":1029,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":903,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["fitness",{"_index":1299,"title":{},"body":{"license.html":{}}}],["flixable",{"_index":1242,"title":{},"body":{"index.html":{}}}],["following",{"_index":1284,"title":{},"body":{"license.html":{}}}],["forbidden",{"_index":988,"title":{},"body":{"controllers/UsersController.html":{}}}],["forbiddenexception",{"_index":697,"title":{},"body":{"injectables/JoiValidatorPipe.html":{},"injectables/ParseToObjectPipe.html":{},"miscellaneous/variables.html":{}}}],["forbiddenexception('uploaded",{"_index":1364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbidnonwhitelisted",{"_index":1347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbidunknownvalues",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foreignfield",{"_index":900,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["forget",{"_index":1244,"title":{},"body":{"index.html":{}}}],["format",{"_index":782,"title":{},"body":{"classes/RestaurantDto.html":{}}}],["found",{"_index":102,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["free",{"_index":1210,"title":{},"body":{"index.html":{},"license.html":{}}}],["front",{"_index":1232,"title":{},"body":{"index.html":{}}}],["function",{"_index":626,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{},"injectables/ElasticSearchService.html":{},"coverage.html":{}}}],["functions",{"_index":1163,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1282,"title":{},"body":{"license.html":{}}}],["gateways",{"_index":1239,"title":{},"body":{"index.html":{}}}],["general/cities/cities.module",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["general/countries/countries.module",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["general/restaurants/restaurants.module",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["generic",{"_index":1222,"title":{},"body":{"index.html":{}}}],["geo",{"_index":1225,"title":{},"body":{"index.html":{}}}],["geometry",{"_index":917,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["geopointschema",{"_index":1100,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["get(':_id",{"_index":464,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["get(':_id')@apioperation({summary",{"_index":801,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["get(':_id')@roles('admin')@apioperation({summary",{"_index":444,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/UsersController.html":{}}}],["get('groupbycity",{"_index":861,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["get('groupbycity')@apioperation({summary",{"_index":803,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["get()@apioperation({summary",{"_index":441,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{}}}],["get()@roles('admin')@apioperation({summary",{"_index":974,"title":{},"body":{"controllers/UsersController.html":{}}}],["getall",{"_index":483,"title":{},"body":{"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["getbyemail",{"_index":1002,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemail(email",{"_index":1013,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid",{"_index":431,"title":{},"body":{"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getbyid(@param('_id",{"_index":465,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["getbyid(id",{"_index":443,"title":{},"body":{"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":1172,"title":{"index.html":{},"license.html":{}},"body":{}}],["give",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["given",{"_index":1190,"title":{},"body":{"index.html":{}}}],["global",{"_index":648,"title":{},"body":{"modules/ElasticSearchModule.html":{}}}],["goneexception('cannot",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["granted",{"_index":1258,"title":{},"body":{"license.html":{}}}],["graymap",{"_index":1388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["group",{"_index":804,"title":{},"body":{"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"index.html":{}}}],["groupbycity",{"_index":792,"title":{},"body":{"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{}}}],["guard",{"_index":921,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":922,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handler",{"_index":90,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["hapi/joi",{"_index":699,"title":{},"body":{"injectables/JoiValidatorPipe.html":{},"injectables/ParseToObjectPipe.html":{},"dependencies.html":{}}}],["hash",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["hashedpassword",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasrole",{"_index":937,"title":{},"body":{"guards/RolesGuard.html":{}}}],["helmet",{"_index":1137,"title":{},"body":{"dependencies.html":{}}}],["helpers",{"_index":832,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["hereby",{"_index":1257,"title":{},"body":{"license.html":{}}}],["hex",{"_index":395,"title":{},"body":{"classes/BaseDtoClass.html":{}}}],["hisham",{"_index":1251,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1305,"title":{},"body":{"license.html":{}}}],["host",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["hosting",{"_index":1211,"title":{},"body":{"index.html":{}}}],["hour",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://127.0.0.1:9200",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["httpexception",{"_index":8,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{}}}],["httpstatus",{"_index":23,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"injectables/JoiValidatorPipe.html":{}}}],["httpstatus.accepted",{"_index":29,"title":{},"body":{"classes/AcceptedException.html":{}}}],["httpstatus.conflict",{"_index":108,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.forbidden",{"_index":705,"title":{},"body":{"injectables/JoiValidatorPipe.html":{}}}],["ichangepassword",{"_index":659,"title":{"interfaces/IChangePassword.html":{}},"body":{"interfaces/IChangePassword.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["icity",{"_index":489,"title":{"interfaces/ICity.html":{}},"body":{"injectables/CitiesService.html":{},"interfaces/ICity.html":{},"coverage.html":{}}}],["icon",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"interfaces/ICity.html":{},"interfaces/IRestaurant.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["id'})@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":818,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["identifier",{"_index":1054,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":530,"title":{},"body":{"injectables/CitiesService.html":{}}}],["ignoreexpiration",{"_index":721,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["ilocation",{"_index":664,"title":{"interfaces/ILocation.html":{}},"body":{"interfaces/ILocation.html":{},"coverage.html":{}}}],["image",{"_index":675,"title":{},"body":{"interfaces/IRestaurant.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["image/bmp",{"_index":1371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image/cis",{"_index":1372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image/gif",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image/ief",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image/jpeg",{"_index":1376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image/pipeg",{"_index":1377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image/svg+xml",{"_index":1378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image/tiff",{"_index":1379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image/x",{"_index":1380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["images",{"_index":853,"title":{},"body":{"controllers/RestaurantsController.html":{},"miscellaneous/variables.html":{}}}],["immediately",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imongopoint",{"_index":668,"title":{"interfaces/IMongoPoint.html":{}},"body":{"interfaces/IMongoPoint.html":{},"interfaces/IRestaurant.html":{},"injectables/RestaurantsService.html":{},"coverage.html":{}}}],["implements",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/DeleteFieldsInterceptor.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"guards/RolesGuard.html":{}}}],["implied",{"_index":1295,"title":{},"body":{"license.html":{}}}],["import",{"_index":22,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/CreateUserDto.html":{},"injectables/DeleteFieldsInterceptor.html":{},"modules/ElasticSearchModule.html":{},"injectables/ElasticSearchService.html":{},"interfaces/ICity.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LocationDto.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"modules/ElasticSearchModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{}}}],["inactivity",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["included",{"_index":1289,"title":{},"body":{"license.html":{}}}],["including",{"_index":1268,"title":{},"body":{"license.html":{}}}],["incomepasswords",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["incomepasswords.confirmnewpassword",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["incomepasswords.newpassword",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["incomepasswords.oldpassword",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["incrementing",{"_index":1219,"title":{},"body":{"index.html":{}}}],["index",{"_index":37,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"injectables/DeleteFieldsInterceptor.html":{},"interfaces/IChangePassword.html":{},"interfaces/ICity.html":{},"interfaces/ILocation.html":{},"interfaces/IMongoPoint.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LocationDto.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["indexes",{"_index":511,"title":{},"body":{"injectables/CitiesService.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/CreateUserDto.html":{},"injectables/DeleteFieldsInterceptor.html":{},"modules/ElasticSearchModule.html":{},"injectables/ElasticSearchService.html":{},"interfaces/IChangePassword.html":{},"interfaces/ICity.html":{},"interfaces/ILocation.html":{},"interfaces/IMongoPoint.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LocationDto.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inherited",{"_index":559,"title":{},"body":{"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{}}}],["init",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["initial",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initonpath",{"_index":1460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectable",{"_index":314,"title":{"injectables/AuthService.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"injectables/CountriesService.html":{},"injectables/DeleteFieldsInterceptor.html":{},"injectables/ElasticSearchService.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"injectables/CountriesService.html":{},"injectables/DeleteFieldsInterceptor.html":{},"injectables/ElasticSearchService.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"injectables/CountriesService.html":{},"injectables/DeleteFieldsInterceptor.html":{},"injectables/ElasticSearchService.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":497,"title":{},"body":{"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel('city",{"_index":498,"title":{},"body":{"injectables/CitiesService.html":{}}}],["injectmodel('restaurant",{"_index":893,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["injectmodel('user",{"_index":1020,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":1174,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1176,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["intercept",{"_index":611,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{},"injectables/MongoPointToObjectInterceptor.html":{}}}],["intercept(context",{"_index":615,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{},"injectables/MongoPointToObjectInterceptor.html":{}}}],["interceptor",{"_index":1223,"title":{},"body":{"index.html":{}}}],["interface",{"_index":658,"title":{"interfaces/IChangePassword.html":{},"interfaces/ICity.html":{},"interfaces/ILocation.html":{},"interfaces/IMongoPoint.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{}},"body":{"interfaces/IChangePassword.html":{},"interfaces/ICity.html":{},"interfaces/ILocation.html":{},"interfaces/IMongoPoint.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{},"coverage.html":{}}}],["interfaces",{"_index":660,"title":{},"body":{"interfaces/IChangePassword.html":{},"interfaces/ICity.html":{},"interfaces/ILocation.html":{},"interfaces/IMongoPoint.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{},"overview.html":{}}}],["interfaces/city.interface",{"_index":496,"title":{},"body":{"injectables/CitiesService.html":{}}}],["interfaces/jwt",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["interfaces/restaurant.interface",{"_index":892,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["interfaces/user.interface",{"_index":1019,"title":{},"body":{"injectables/UsersService.html":{}}}],["internalservererrorexception",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["invalid",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalidemailorpassword",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalidnewpassconfirmation",{"_index":1362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalidpassword",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalidpasswordconfirmation",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ionic",{"_index":1235,"title":{},"body":{"index.html":{}}}],["ip",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ipv4",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ipv6",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["irestaurant",{"_index":672,"title":{"interfaces/IRestaurant.html":{}},"body":{"interfaces/IRestaurant.html":{},"injectables/RestaurantsService.html":{},"coverage.html":{}}}],["isarray",{"_index":601,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["iscompaniedfields",{"_index":640,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["iscompaniedfields.length",{"_index":642,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["isemail",{"_index":419,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserLoginDto.html":{}}}],["isenum",{"_index":421,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/RegisterNewUserDto.html":{}}}],["ishttperror",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ismongoid",{"_index":388,"title":{},"body":{"classes/BaseDtoClass.html":{},"classes/RestaurantDto.html":{}}}],["isnotempty",{"_index":390,"title":{},"body":{"classes/BaseDtoClass.html":{}}}],["isnumber",{"_index":389,"title":{},"body":{"classes/BaseDtoClass.html":{},"classes/LocationDto.html":{}}}],["isoptional",{"_index":391,"title":{},"body":{"classes/BaseDtoClass.html":{}}}],["ispasscorrect",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":422,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantsSearchDto.html":{},"classes/UpdateUserDto.html":{}}}],["isvalidoldpassword",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["it's",{"_index":88,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["iuser",{"_index":332,"title":{"interfaces/IUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["iuserjwt",{"_index":207,"title":{"interfaces/IUserJWT.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IUserJWT.html":{},"coverage.html":{}}}],["joi",{"_index":698,"title":{},"body":{"injectables/JoiValidatorPipe.html":{},"injectables/ParseToObjectPipe.html":{},"controllers/RestaurantsController.html":{}}}],["joi.number",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.objectschema",{"_index":689,"title":{},"body":{"injectables/JoiValidatorPipe.html":{}}}],["join",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["joischema",{"_index":688,"title":{},"body":{"injectables/JoiValidatorPipe.html":{}}}],["joivalidatorpipe",{"_index":683,"title":{"injectables/JoiValidatorPipe.html":{}},"body":{"injectables/JoiValidatorPipe.html":{},"controllers/RestaurantsController.html":{},"coverage.html":{}}}],["joivalidatorpipe('location",{"_index":849,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["js",{"_index":1197,"title":{},"body":{"index.html":{}}}],["json.parse(body[this.propertyname",{"_index":768,"title":{},"body":{"injectables/ParseToObjectPipe.html":{}}}],["jsonres",{"_index":65,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jsonres.error",{"_index":101,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jsonres.key",{"_index":93,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jsonres.message",{"_index":89,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jsonres.statuscode",{"_index":78,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jsonres.value",{"_index":95,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jsonres[property",{"_index":85,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jwt",{"_index":716,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt_bearer_token",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtfromrequest",{"_index":719,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":305,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":309,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtoptions",{"_index":300,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtoptions.secret",{"_index":311,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtoptions.signoptions",{"_index":313,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":297,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamal",{"_index":1253,"title":{},"body":{"license.html":{}}}],["key",{"_index":76,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/JoiValidatorPipe.html":{}}}],["keybasic",{"_index":109,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["keybasic[2",{"_index":113,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["kind",{"_index":1294,"title":{},"body":{"license.html":{}}}],["latitude",{"_index":666,"title":{},"body":{"interfaces/ILocation.html":{},"classes/LocationDto.html":{},"injectables/RestaurantsService.html":{},"miscellaneous/variables.html":{}}}],["lean",{"_index":1030,"title":{},"body":{"injectables/UsersService.html":{}}}],["legend",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"modules/ElasticSearchModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":399,"title":{},"body":{"classes/BaseDtoClass.html":{}}}],["liability",{"_index":1309,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1306,"title":{},"body":{"license.html":{}}}],["license",{"_index":1213,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":1215,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1135,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["limit.options.ts",{"_index":1094,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["limitation",{"_index":1269,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1296,"title":{},"body":{"license.html":{}}}],["line",{"_index":403,"title":{},"body":{"classes/BaseDtoClass.html":{}}}],["local",{"_index":733,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localfield",{"_index":899,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["localstrategy",{"_index":298,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["location",{"_index":676,"title":{},"body":{"interfaces/IRestaurant.html":{},"classes/RestaurantDto.html":{},"injectables/RestaurantsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["location.coordinates",{"_index":908,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["location.dto",{"_index":786,"title":{},"body":{"classes/RestaurantDto.html":{}}}],["locationdto",{"_index":677,"title":{"classes/LocationDto.html":{}},"body":{"interfaces/IRestaurant.html":{},"classes/LocationDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"coverage.html":{}}}],["locationvalidator",{"_index":835,"title":{},"body":{"controllers/RestaurantsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["log",{"_index":1051,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AuthModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["logger.log('admin",{"_index":1048,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger.log('unhandled",{"_index":115,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["logger.log(user",{"_index":735,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["login",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(userlogin",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.dto",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["login.dto.ts",{"_index":960,"title":{},"body":{"classes/UserLoginDto.html":{},"coverage.html":{}}}],["login.dto.ts:12",{"_index":964,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["login.dto.ts:7",{"_index":962,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["logout",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@req",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["longitude",{"_index":667,"title":{},"body":{"interfaces/ILocation.html":{},"classes/LocationDto.html":{},"injectables/RestaurantsService.html":{},"miscellaneous/variables.html":{}}}],["lookup",{"_index":898,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["maintain",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manager",{"_index":1119,"title":{},"body":{"dependencies.html":{}}}],["many",{"_index":1228,"title":{},"body":{"index.html":{}}}],["map",{"_index":623,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["map(data",{"_index":637,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["mapping",{"_index":505,"title":{},"body":{"injectables/CitiesService.html":{},"injectables/UsersService.html":{}}}],["matches",{"_index":420,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/UserLoginDto.html":{}}}],["matches(/^.{6",{"_index":423,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/UserLoginDto.html":{}}}],["matching",{"_index":31,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/CreateUserDto.html":{},"injectables/DeleteFieldsInterceptor.html":{},"modules/ElasticSearchModule.html":{},"injectables/ElasticSearchService.html":{},"interfaces/IChangePassword.html":{},"interfaces/ICity.html":{},"interfaces/ILocation.html":{},"interfaces/IMongoPoint.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LocationDto.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":742,"title":{},"body":{"classes/LocationDto.html":{},"miscellaneous/variables.html":{}}}],["max(180",{"_index":745,"title":{},"body":{"classes/LocationDto.html":{}}}],["max(90",{"_index":747,"title":{},"body":{"classes/LocationDto.html":{}}}],["maxage",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["maximum",{"_index":1368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maximumsize",{"_index":1394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mega",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["merchantability",{"_index":1298,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1273,"title":{},"body":{"license.html":{}}}],["message",{"_index":20,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"injectables/JoiValidatorPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/UserLoginDto.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":693,"title":{},"body":{"injectables/JoiValidatorPipe.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"dependencies.html":{}}}],["methods",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"injectables/DeleteFieldsInterceptor.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mimestype",{"_index":1370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["min",{"_index":741,"title":{},"body":{"classes/LocationDto.html":{}}}],["minutes",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":1159,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1214,"title":{},"body":{"index.html":{},"license.html":{}}}],["mobile",{"_index":1234,"title":{},"body":{"index.html":{}}}],["model",{"_index":479,"title":{},"body":{"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["models",{"_index":577,"title":{},"body":{"controllers/CountriesController.html":{},"index.html":{}}}],["models/country.model",{"_index":574,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{}}}],["modify",{"_index":1272,"title":{},"body":{"license.html":{}}}],["module",{"_index":119,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"modules/ElasticSearchModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"modules/ElasticSearchModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":121,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"modules/ElasticSearchModule.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["modules/system/elastic",{"_index":551,"title":{},"body":{"injectables/CitiesService-1.html":{}}}],["mongo",{"_index":394,"title":{},"body":{"classes/BaseDtoClass.html":{},"interfaces/IRestaurant.html":{},"injectables/ObjectToMongoPointPipe.html":{},"controllers/RestaurantsController.html":{},"coverage.html":{},"index.html":{}}}],["mongoerror",{"_index":104,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["mongoosastic",{"_index":1139,"title":{},"body":{"dependencies.html":{}}}],["mongoose",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"interfaces/ICity.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mongoosedelete",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoosemodule",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":480,"title":{},"body":{"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["mongooseoptions",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongooseupdatedocumentversion",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["mongopointtoobjectinterceptor",{"_index":748,"title":{"injectables/MongoPointToObjectInterceptor.html":{}},"body":{"injectables/MongoPointToObjectInterceptor.html":{},"coverage.html":{}}}],["ms",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":17,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"controllers/CitiesController.html":{},"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"modules/CountriesModule.html":{},"classes/CreateUserDto.html":{},"injectables/DeleteFieldsInterceptor.html":{},"injectables/ElasticSearchService.html":{},"interfaces/ICity.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["name'})@isstring",{"_index":593,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantsSearchDto.html":{}}}],["names",{"_index":1192,"title":{},"body":{"index.html":{}}}],["nearest",{"_index":812,"title":{},"body":{"controllers/RestaurantsController.html":{},"index.html":{}}}],["nearestrestaurant",{"_index":793,"title":{},"body":{"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{}}}],["nearestrestaurant(@body(new",{"_index":857,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["nearestrestaurant(body",{"_index":809,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["nearestrestaurant(location",{"_index":886,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["nearsphere",{"_index":916,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["need",{"_index":1181,"title":{},"body":{"index.html":{}}}],["nest",{"_index":824,"title":{},"body":{"controllers/RestaurantsController.html":{},"index.html":{}}}],["nested",{"_index":83,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["nestinterceptor",{"_index":621,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{},"injectables/MongoPointToObjectInterceptor.html":{}}}],["nestjs",{"_index":1146,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":24,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CitiesController.html":{},"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"injectables/DeleteFieldsInterceptor.html":{},"modules/ElasticSearchModule.html":{},"injectables/ElasticSearchService.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":1109,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":930,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/elasticsearch",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/ElasticSearchModule.html":{},"injectables/ElasticSearchService.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":306,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"modules/CountriesModule.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CitiesController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":827,"title":{},"body":{"controllers/RestaurantsController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"classes/CreateUserDto.html":{},"classes/LocationDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"classes/RestaurantsSearchDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjsx/crud",{"_index":576,"title":{},"body":{"controllers/CountriesController.html":{},"dependencies.html":{}}}],["never",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":67,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"injectables/JoiValidatorPipe.html":{},"classes/RegisterNewUserDto.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newpass",{"_index":424,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["newpass'})@matches(/^.{6",{"_index":410,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["newpassword",{"_index":408,"title":{},"body":{"classes/ChangePasswordDto.html":{},"injectables/UsersService.html":{}}}],["newuser",{"_index":1024,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":402,"title":{},"body":{"classes/BaseDtoClass.html":{},"injectables/DeleteFieldsInterceptor.html":{},"injectables/MongoPointToObjectInterceptor.html":{}}}],["next.handle",{"_index":752,"title":{},"body":{"injectables/MongoPointToObjectInterceptor.html":{}}}],["next.handle().pipe",{"_index":636,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["node",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"modules/ElasticSearchModule.html":{}}}],["noninfringement",{"_index":1302,"title":{},"body":{"license.html":{}}}],["normal",{"_index":1188,"title":{},"body":{"index.html":{}}}],["notes",{"_index":1198,"title":{},"body":{"index.html":{}}}],["notice",{"_index":1287,"title":{},"body":{"license.html":{}}}],["npcpcsx8drrlskszrdxdmbzo",{"_index":650,"title":{},"body":{"modules/ElasticSearchModule.html":{}}}],["npm",{"_index":1175,"title":{},"body":{"index.html":{}}}],["null",{"_index":75,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{}}}],["number",{"_index":376,"title":{},"body":{"classes/BaseDtoClass.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ILocation.html":{},"interfaces/IMongoPoint.html":{},"classes/LocationDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["number.max_value",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numbering",{"_index":1226,"title":{},"body":{"index.html":{}}}],["oauth",{"_index":1245,"title":{},"body":{"index.html":{}}}],["obj._id",{"_index":656,"title":{},"body":{"injectables/ElasticSearchService.html":{}}}],["obj._source",{"_index":657,"title":{},"body":{"injectables/ElasticSearchService.html":{}}}],["object",{"_index":13,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"injectables/DeleteFieldsInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.interceptor.ts",{"_index":750,"title":{},"body":{"injectables/MongoPointToObjectInterceptor.html":{},"coverage.html":{}}}],["object.interceptor.ts:11",{"_index":751,"title":{},"body":{"injectables/MongoPointToObjectInterceptor.html":{}}}],["object.pipe",{"_index":821,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["object.pipe.ts",{"_index":765,"title":{},"body":{"injectables/ParseToObjectPipe.html":{},"coverage.html":{}}}],["object.pipe.ts:10",{"_index":766,"title":{},"body":{"injectables/ParseToObjectPipe.html":{}}}],["object.pipe.ts:13",{"_index":767,"title":{},"body":{"injectables/ParseToObjectPipe.html":{}}}],["object.values",{"_index":97,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["object[fieldname",{"_index":629,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["objectid",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["objecttomongopointpipe",{"_index":753,"title":{"injectables/ObjectToMongoPointPipe.html":{}},"body":{"injectables/ObjectToMongoPointPipe.html":{},"controllers/RestaurantsController.html":{},"coverage.html":{}}}],["objecttomongopointpipe('location",{"_index":850,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["observable",{"_index":620,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"guards/RolesGuard.html":{}}}],["obtaining",{"_index":1261,"title":{},"body":{"license.html":{}}}],["old",{"_index":415,"title":{},"body":{"classes/ChangePasswordDto.html":{},"miscellaneous/variables.html":{}}}],["oldpass",{"_index":414,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["oldpassword",{"_index":409,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["optional",{"_index":19,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"injectables/DeleteFieldsInterceptor.html":{},"injectables/ElasticSearchService.html":{},"interfaces/ICity.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["organize",{"_index":1240,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":1314,"title":{},"body":{"license.html":{}}}],["out",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"modules/ElasticSearchModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1321,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p@$$$w0rd",{"_index":966,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["p@$$$w0rd'})@matches(/^.{6",{"_index":963,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["p@$$w0rd",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["package",{"_index":1104,"title":{"dependencies.html":{}},"body":{}}],["pagination",{"_index":1227,"title":{},"body":{"index.html":{}}}],["param",{"_index":456,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["param('_id",{"_index":865,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["parameters",{"_index":16,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"injectables/DeleteFieldsInterceptor.html":{},"injectables/ElasticSearchService.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":1126,"title":{},"body":{"dependencies.html":{}}}],["parsetoobjectpipe",{"_index":763,"title":{"injectables/ParseToObjectPipe.html":{}},"body":{"injectables/ParseToObjectPipe.html":{},"controllers/RestaurantsController.html":{},"coverage.html":{}}}],["parsetoobjectpipe('location",{"_index":848,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["particular",{"_index":1300,"title":{},"body":{"license.html":{}}}],["pass",{"_index":87,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{}}}],["passport",{"_index":715,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["passportmodule",{"_index":304,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":717,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":718,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"modules/ElasticSearchModule.html":{},"interfaces/IChangePassword.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterNewUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["password')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.ts",{"_index":662,"title":{},"body":{"interfaces/IChangePassword.html":{},"coverage.html":{}}}],["password123",{"_index":605,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterNewUserDto.html":{}}}],["password123'})@matches(/^.{6",{"_index":589,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterNewUserDto.html":{}}}],["path",{"_index":69,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/RestaurantsService.html":{}}}],["payload",{"_index":712,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload._id",{"_index":724,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":725,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.roles",{"_index":726,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["per",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permission",{"_index":1256,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1280,"title":{},"body":{"license.html":{}}}],["person",{"_index":1260,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1281,"title":{},"body":{"license.html":{}}}],["pipes",{"_index":837,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["pipetransform",{"_index":696,"title":{},"body":{"injectables/JoiValidatorPipe.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{}}}],["pixmap",{"_index":1389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plugin",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["plugin(mongoosedelete",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["plugin(mongooseupdatedocumentversion",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["plugin(timestamps",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["point",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CitiesController.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["point.interface",{"_index":678,"title":{},"body":{"interfaces/IRestaurant.html":{}}}],["point.interface.ts",{"_index":670,"title":{},"body":{"interfaces/IMongoPoint.html":{},"coverage.html":{}}}],["point.pipe",{"_index":841,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["point.pipe.ts",{"_index":755,"title":{},"body":{"injectables/ObjectToMongoPointPipe.html":{},"coverage.html":{}}}],["point.pipe.ts:4",{"_index":756,"title":{},"body":{"injectables/ObjectToMongoPointPipe.html":{}}}],["point.pipe.ts:6",{"_index":757,"title":{},"body":{"injectables/ObjectToMongoPointPipe.html":{}}}],["point.schema.ts",{"_index":1099,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["poolsize",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["portable",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["portions",{"_index":1291,"title":{},"body":{"license.html":{}}}],["post",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["post('change",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@apioperation({summary",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('nearest",{"_index":856,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["post('nearest')@apioperation({summary",{"_index":810,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["post('profile",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('profile')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apioperation({summary",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('search",{"_index":859,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["post('search')@apioperation({summary",{"_index":816,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["post()@roles('admin')@apioperation({summary",{"_index":434,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["prefix",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CitiesController.html":{},"controllers/CountriesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["preservenullandemptyarrays",{"_index":902,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["private",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["process.env.api_auth_enabled",{"_index":931,"title":{},"body":{"guards/RolesGuard.html":{}}}],["process.env.database_name",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_uri.replace('{{dbname",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.es_uri",{"_index":649,"title":{},"body":{"modules/ElasticSearchModule.html":{}}}],["profile",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["profile(@user",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile(id",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["profile(user",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["project",{"_index":914,"title":{},"body":{"injectables/RestaurantsService.html":{},"index.html":{}}}],["promise",{"_index":732,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":371,"title":{},"body":{"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IChangePassword.html":{},"interfaces/ICity.html":{},"interfaces/ILocation.html":{},"interfaces/IMongoPoint.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{},"classes/LocationDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"classes/RestaurantsSearchDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{}}}],["property",{"_index":82,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["propertyname",{"_index":691,"title":{},"body":{"injectables/JoiValidatorPipe.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{}}}],["provided",{"_index":1292,"title":{},"body":{"license.html":{}}}],["providers",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"modules/ElasticSearchModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["publish",{"_index":1274,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1301,"title":{},"body":{"license.html":{}}}],["push",{"_index":905,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["put",{"_index":455,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["put(':_id",{"_index":470,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["put(':_id')@roles('admin')@apioperation({summary",{"_index":448,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["query",{"_index":517,"title":{},"body":{"injectables/CitiesService.html":{}}}],["query_string",{"_index":516,"title":{},"body":{"injectables/CitiesService.html":{}}}],["raster",{"_index":1382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rate",{"_index":1134,"title":{},"body":{"dependencies.html":{}}}],["ratelimitoptions",{"_index":1095,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["readonly",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"injectables/ElasticSearchService.html":{},"interfaces/IChangePassword.html":{},"interfaces/IRestaurant.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/LocalStrategy.html":{},"classes/LocationDto.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["recommended",{"_index":1194,"title":{},"body":{"index.html":{}}}],["reconnect",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reconnectinterval",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reconnecttries",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["record",{"_index":985,"title":{},"body":{"controllers/UsersController.html":{}}}],["ref",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":926,"title":{},"body":{"guards/RolesGuard.html":{}}}],["regexp(constants.admin.email",{"_index":1042,"title":{},"body":{"injectables/UsersService.html":{}}}],["regexp(restaurantname",{"_index":896,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["register",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{}}}],["register(@body",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registernewuserdto",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(user",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["registernewuserdto",{"_index":231,"title":{"classes/RegisterNewUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterNewUserDto.html":{},"coverage.html":{}}}],["registernewuserdto.confirmpassword",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["registernewuserdto.password",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["relation",{"_index":807,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["req",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["req.cookies.jwt",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.url",{"_index":70,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["req.user",{"_index":1468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":934,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request.user",{"_index":936,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requests",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requirements",{"_index":1184,"title":{},"body":{"index.html":{}}}],["res",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["res.status(jsonres.statuscode",{"_index":117,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["reset",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"modules/ElasticSearchModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":1221,"title":{},"body":{"index.html":{}}}],["rest",{"_index":1200,"title":{},"body":{"index.html":{}}}],["restaurant",{"_index":795,"title":{},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"index.html":{}}}],["restaurant'})@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":796,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["restaurant.dto",{"_index":823,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["restaurant.dto.ts",{"_index":874,"title":{},"body":{"classes/RestaurantsSearchDto.html":{},"coverage.html":{}}}],["restaurant.dto.ts:8",{"_index":875,"title":{},"body":{"classes/RestaurantsSearchDto.html":{}}}],["restaurant@mail.com",{"_index":787,"title":{},"body":{"classes/RestaurantDto.html":{}}}],["restaurant@mail.com'})@isemail",{"_index":779,"title":{},"body":{"classes/RestaurantDto.html":{}}}],["restaurantdto",{"_index":775,"title":{"classes/RestaurantDto.html":{}},"body":{"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"coverage.html":{}}}],["restaurantid",{"_index":906,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurantmodel",{"_index":879,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurantname",{"_index":890,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurants",{"_index":791,"title":{},"body":{"controllers/RestaurantsController.html":{},"index.html":{}}}],["restaurants.controller",{"_index":870,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["restaurants.count",{"_index":912,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurants.data",{"_index":913,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurants.service",{"_index":834,"title":{},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{}}}],["restaurantscontroller",{"_index":789,"title":{"controllers/RestaurantsController.html":{}},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"coverage.html":{}}}],["restaurantscount",{"_index":909,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurantsdata",{"_index":904,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurantsmodule",{"_index":134,"title":{"modules/RestaurantsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RestaurantsModule.html":{},"modules.html":{},"overview.html":{}}}],["restaurantsschema",{"_index":871,"title":{},"body":{"modules/RestaurantsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["restaurantssearchdto",{"_index":815,"title":{"classes/RestaurantsSearchDto.html":{}},"body":{"controllers/RestaurantsController.html":{},"classes/RestaurantsSearchDto.html":{},"coverage.html":{}}}],["restaurantsservice",{"_index":833,"title":{"injectables/RestaurantsService.html":{}},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"coverage.html":{},"overview.html":{}}}],["restriction",{"_index":1267,"title":{},"body":{"license.html":{}}}],["result",{"_index":30,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/CreateUserDto.html":{},"injectables/DeleteFieldsInterceptor.html":{},"modules/ElasticSearchModule.html":{},"injectables/ElasticSearchService.html":{},"interfaces/IChangePassword.html":{},"interfaces/ICity.html":{},"interfaces/ILocation.html":{},"interfaces/IMongoPoint.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LocationDto.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":32,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/CreateUserDto.html":{},"injectables/DeleteFieldsInterceptor.html":{},"modules/ElasticSearchModule.html":{},"injectables/ElasticSearchService.html":{},"interfaces/IChangePassword.html":{},"interfaces/ICity.html":{},"interfaces/ILocation.html":{},"interfaces/IMongoPoint.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LocationDto.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results.hits",{"_index":519,"title":{},"body":{"injectables/CitiesService.html":{}}}],["results.hits.hits",{"_index":520,"title":{},"body":{"injectables/CitiesService.html":{}}}],["results.hits.hits.map(doc",{"_index":521,"title":{},"body":{"injectables/CitiesService.html":{}}}],["return",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"injectables/DeleteFieldsInterceptor.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"injectables/DeleteFieldsInterceptor.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rgb",{"_index":1390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rights",{"_index":1270,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":606,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["roles",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CitiesController.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterNewUserDto.html":{},"controllers/RestaurantsController.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":460,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["roles.includes(role",{"_index":939,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":450,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["rootpath",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["rounds",{"_index":1344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":622,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":624,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["safely",{"_index":529,"title":{},"body":{"injectables/CitiesService.html":{}}}],["schema",{"_index":481,"title":{},"body":{"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["schemas/city.schema",{"_index":478,"title":{},"body":{"modules/CitiesModule.html":{}}}],["schemas/restaurants.schema",{"_index":872,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["schemas/user.schema",{"_index":998,"title":{},"body":{"modules/UsersModule.html":{}}}],["search",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"injectables/ElasticSearchService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"index.html":{}}}],["search(body",{"_index":814,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["search(restaurantname",{"_index":888,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["search.body.hits.hits.map(obj",{"_index":655,"title":{},"body":{"injectables/ElasticSearchService.html":{}}}],["search.module",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"injectables/CitiesService.html":{}}}],["search.module.ts",{"_index":647,"title":{},"body":{"modules/ElasticSearchModule.html":{}}}],["search.options.ts",{"_index":1089,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["search.service",{"_index":495,"title":{},"body":{"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"modules/ElasticSearchModule.html":{}}}],["search.service.ts",{"_index":651,"title":{},"body":{"injectables/ElasticSearchService.html":{},"coverage.html":{}}}],["search.service.ts:5",{"_index":653,"title":{},"body":{"injectables/ElasticSearchService.html":{}}}],["search/elastic",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"modules/ElasticSearchModule.html":{},"injectables/ElasticSearchService.html":{},"coverage.html":{}}}],["seconds",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secret",{"_index":310,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":723,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sell",{"_index":1278,"title":{},"body":{"license.html":{}}}],["serve",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":1212,"title":{},"body":{"index.html":{}}}],["set",{"_index":538,"title":{},"body":{"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["setmetadata('roles",{"_index":1459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":1288,"title":{},"body":{"license.html":{}}}],["shared/base/dto/base",{"_index":566,"title":{},"body":{"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{}}}],["shared/constants/constants",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["shared/decorators/user.decorator",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["shared/exceptions/errors",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["shared/guards/roles.guard",{"_index":451,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["shared/helpers/upload",{"_index":839,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["shared/interceptors/delete",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["shared/options/bcrypt.options",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["shared/options/jwt.options",{"_index":301,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["shared/options/mongoose.options",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/pipes/parse",{"_index":820,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["signoptions",{"_index":312,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["simple",{"_index":1182,"title":{},"body":{"index.html":{}}}],["skip",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["socket",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sockets",{"_index":1238,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["sockettimeoutms",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["soft",{"_index":1231,"title":{},"body":{"index.html":{}}}],["software",{"_index":1263,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"modules/CitiesModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/CreateUserDto.html":{},"injectables/DeleteFieldsInterceptor.html":{},"modules/ElasticSearchModule.html":{},"injectables/ElasticSearchService.html":{},"interfaces/IChangePassword.html":{},"interfaces/ICity.html":{},"interfaces/ILocation.html":{},"interfaces/IMongoPoint.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LocationDto.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/.../bcrypt.options.ts",{"_index":1326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../city.schema.ts",{"_index":1327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../class",{"_index":1328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../country.model.ts",{"_index":1330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../delete",{"_index":1165,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../elastic",{"_index":1331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../errors.ts",{"_index":1332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../extend",{"_index":1167,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../files",{"_index":1333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../geo",{"_index":1334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../jwt.options.ts",{"_index":1335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../location.joi.ts",{"_index":1336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1164,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../mongoose.options.ts",{"_index":1337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../rate",{"_index":1338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../restaurants.schema.ts",{"_index":1339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enums.ts",{"_index":1161,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../swagger.options.ts",{"_index":1341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../upload",{"_index":1166,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.decorator.ts",{"_index":1342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":1343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1056,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/app.module.ts",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/general/cities/cities.controller.ts",{"_index":427,"title":{},"body":{"controllers/CitiesController.html":{},"coverage.html":{}}}],["src/modules/general/cities/cities.controller.ts:31",{"_index":436,"title":{},"body":{"controllers/CitiesController.html":{}}}],["src/modules/general/cities/cities.controller.ts:40",{"_index":442,"title":{},"body":{"controllers/CitiesController.html":{}}}],["src/modules/general/cities/cities.controller.ts:50",{"_index":445,"title":{},"body":{"controllers/CitiesController.html":{}}}],["src/modules/general/cities/cities.controller.ts:60",{"_index":440,"title":{},"body":{"controllers/CitiesController.html":{}}}],["src/modules/general/cities/cities.controller.ts:70",{"_index":449,"title":{},"body":{"controllers/CitiesController.html":{}}}],["src/modules/general/cities/cities.module.ts",{"_index":475,"title":{},"body":{"modules/CitiesModule.html":{}}}],["src/modules/general/cities/cities.service.ts",{"_index":482,"title":{},"body":{"injectables/CitiesService.html":{},"coverage.html":{}}}],["src/modules/general/cities/cities.service.ts:101",{"_index":491,"title":{},"body":{"injectables/CitiesService.html":{}}}],["src/modules/general/cities/cities.service.ts:105",{"_index":492,"title":{},"body":{"injectables/CitiesService.html":{}}}],["src/modules/general/cities/cities.service.ts:8",{"_index":486,"title":{},"body":{"injectables/CitiesService.html":{}}}],["src/modules/general/cities/cities.service.ts:85",{"_index":490,"title":{},"body":{"injectables/CitiesService.html":{}}}],["src/modules/general/cities/cities.service.ts:89",{"_index":494,"title":{},"body":{"injectables/CitiesService.html":{}}}],["src/modules/general/cities/cities.service.ts:97",{"_index":493,"title":{},"body":{"injectables/CitiesService.html":{}}}],["src/modules/general/cities/dto/city.dto.ts",{"_index":558,"title":{},"body":{"classes/CityDto.html":{},"coverage.html":{}}}],["src/modules/general/cities/interfaces/city.interface.ts",{"_index":663,"title":{},"body":{"interfaces/ICity.html":{},"coverage.html":{}}}],["src/modules/general/cities/schemas/city.schema.ts",{"_index":1061,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/general/countries/countries.controller.ts",{"_index":569,"title":{},"body":{"controllers/CountriesController.html":{},"coverage.html":{}}}],["src/modules/general/countries/countries.module.ts",{"_index":581,"title":{},"body":{"modules/CountriesModule.html":{}}}],["src/modules/general/countries/countries.service.ts",{"_index":584,"title":{},"body":{"injectables/CountriesService.html":{},"coverage.html":{}}}],["src/modules/general/countries/models/country.model.ts",{"_index":1062,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/general/restaurants/dto/location.dto.ts",{"_index":736,"title":{},"body":{"classes/LocationDto.html":{},"coverage.html":{}}}],["src/modules/general/restaurants/dto/location.dto.ts:15",{"_index":738,"title":{},"body":{"classes/LocationDto.html":{}}}],["src/modules/general/restaurants/dto/location.dto.ts:9",{"_index":740,"title":{},"body":{"classes/LocationDto.html":{}}}],["src/modules/general/restaurants/dto/restaurant.dto.ts",{"_index":776,"title":{},"body":{"classes/RestaurantDto.html":{},"coverage.html":{}}}],["src/modules/general/restaurants/dto/restaurant.dto.ts:13",{"_index":778,"title":{},"body":{"classes/RestaurantDto.html":{}}}],["src/modules/general/restaurants/dto/restaurant.dto.ts:18",{"_index":784,"title":{},"body":{"classes/RestaurantDto.html":{}}}],["src/modules/general/restaurants/dto/restaurant.dto.ts:23",{"_index":780,"title":{},"body":{"classes/RestaurantDto.html":{}}}],["src/modules/general/restaurants/dto/restaurant.dto.ts:32",{"_index":785,"title":{},"body":{"classes/RestaurantDto.html":{}}}],["src/modules/general/restaurants/dto/search",{"_index":873,"title":{},"body":{"classes/RestaurantsSearchDto.html":{},"coverage.html":{}}}],["src/modules/general/restaurants/interfaces/location.interface.ts",{"_index":665,"title":{},"body":{"interfaces/ILocation.html":{},"coverage.html":{}}}],["src/modules/general/restaurants/interfaces/mongo",{"_index":669,"title":{},"body":{"interfaces/IMongoPoint.html":{},"coverage.html":{}}}],["src/modules/general/restaurants/interfaces/restaurant.interface.ts",{"_index":673,"title":{},"body":{"interfaces/IRestaurant.html":{},"coverage.html":{}}}],["src/modules/general/restaurants/restaurants.controller.ts",{"_index":790,"title":{},"body":{"controllers/RestaurantsController.html":{},"coverage.html":{}}}],["src/modules/general/restaurants/restaurants.controller.ts:109",{"_index":808,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/modules/general/restaurants/restaurants.controller.ts:118",{"_index":802,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/modules/general/restaurants/restaurants.controller.ts:128",{"_index":799,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/modules/general/restaurants/restaurants.controller.ts:141",{"_index":819,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/modules/general/restaurants/restaurants.controller.ts:60",{"_index":798,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/modules/general/restaurants/restaurants.controller.ts:78",{"_index":800,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/modules/general/restaurants/restaurants.controller.ts:87",{"_index":813,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/modules/general/restaurants/restaurants.controller.ts:96",{"_index":817,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/modules/general/restaurants/restaurants.module.ts",{"_index":869,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["src/modules/general/restaurants/restaurants.service.ts",{"_index":876,"title":{},"body":{"injectables/RestaurantsService.html":{},"coverage.html":{}}}],["src/modules/general/restaurants/restaurants.service.ts:13",{"_index":881,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/modules/general/restaurants/restaurants.service.ts:17",{"_index":889,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/modules/general/restaurants/restaurants.service.ts:23",{"_index":885,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/modules/general/restaurants/restaurants.service.ts:7",{"_index":878,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/modules/general/restaurants/restaurants.service.ts:75",{"_index":887,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/modules/general/restaurants/restaurants.service.ts:81",{"_index":891,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/modules/general/restaurants/restaurants.service.ts:89",{"_index":884,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/modules/general/restaurants/restaurants.service.ts:93",{"_index":882,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/modules/general/restaurants/restaurants.service.ts:97",{"_index":883,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/modules/general/restaurants/schemas/restaurants.schema.ts",{"_index":1067,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/general/restaurants/validations/location.joi.ts",{"_index":1068,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/system/elastic",{"_index":646,"title":{},"body":{"modules/ElasticSearchModule.html":{},"injectables/ElasticSearchService.html":{},"coverage.html":{}}}],["src/modules/system/security/auth/auth.controller.ts",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/system/security/auth/auth.controller.ts:34",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/system/security/auth/auth.controller.ts:45",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/system/security/auth/auth.controller.ts:55",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/system/security/auth/auth.controller.ts:74",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/system/security/auth/auth.controller.ts:85",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/system/security/auth/auth.module.ts",{"_index":299,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/system/security/auth/auth.service.ts",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/system/security/auth/auth.service.ts:13",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/system/security/auth/auth.service.ts:19",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/system/security/auth/auth.service.ts:28",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/system/security/auth/auth.service.ts:50",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/system/security/auth/auth.service.ts:55",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/system/security/auth/auth.service.ts:59",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/system/security/auth/dto/change",{"_index":405,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/modules/system/security/auth/dto/register",{"_index":769,"title":{},"body":{"classes/RegisterNewUserDto.html":{},"coverage.html":{}}}],["src/modules/system/security/auth/dto/user",{"_index":959,"title":{},"body":{"classes/UserLoginDto.html":{},"coverage.html":{}}}],["src/modules/system/security/auth/interfaces/change",{"_index":661,"title":{},"body":{"interfaces/IChangePassword.html":{},"coverage.html":{}}}],["src/modules/system/security/auth/interfaces/jwt",{"_index":681,"title":{},"body":{"interfaces/IUserJWT.html":{},"coverage.html":{}}}],["src/modules/system/security/auth/strategies/jwt.strategy.ts",{"_index":707,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/system/security/auth/strategies/jwt.strategy.ts:16",{"_index":711,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/system/security/auth/strategies/jwt.strategy.ts:7",{"_index":709,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/system/security/auth/strategies/local.strategy.ts",{"_index":727,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/modules/system/security/auth/strategies/local.strategy.ts:13",{"_index":731,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/system/security/auth/strategies/local.strategy.ts:8",{"_index":729,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/system/security/users/classes/user.ts",{"_index":951,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/modules/system/security/users/classes/user.ts:10",{"_index":956,"title":{},"body":{"classes/User.html":{}}}],["src/modules/system/security/users/classes/user.ts:13",{"_index":957,"title":{},"body":{"classes/User.html":{}}}],["src/modules/system/security/users/classes/user.ts:4",{"_index":952,"title":{},"body":{"classes/User.html":{}}}],["src/modules/system/security/users/classes/user.ts:6",{"_index":954,"title":{},"body":{"classes/User.html":{}}}],["src/modules/system/security/users/classes/user.ts:7",{"_index":953,"title":{},"body":{"classes/User.html":{}}}],["src/modules/system/security/users/dto/create",{"_index":586,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/system/security/users/dto/update",{"_index":941,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/system/security/users/enum/roles.enums.ts",{"_index":1162,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/system/security/users/interfaces/user.interface.ts",{"_index":680,"title":{},"body":{"interfaces/IUser.html":{},"coverage.html":{}}}],["src/modules/system/security/users/schemas/user.schema.ts",{"_index":1072,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/system/security/users/users.controller.ts",{"_index":968,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/system/security/users/users.controller.ts:40",{"_index":971,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/system/security/users/users.controller.ts:50",{"_index":975,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/system/security/users/users.controller.ts:60",{"_index":976,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/system/security/users/users.controller.ts:70",{"_index":973,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/system/security/users/users.controller.ts:80",{"_index":977,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/system/security/users/users.module.ts",{"_index":996,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/system/security/users/users.service.ts",{"_index":1000,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/system/security/users/users.service.ts:100",{"_index":1010,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/system/security/users/users.service.ts:13",{"_index":1004,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/system/security/users/users.service.ts:25",{"_index":1009,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/system/security/users/users.service.ts:33",{"_index":1016,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/system/security/users/users.service.ts:49",{"_index":1007,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/system/security/users/users.service.ts:65",{"_index":1015,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/system/security/users/users.service.ts:81",{"_index":1011,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/system/security/users/users.service.ts:92",{"_index":1014,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/system/security/users/users.service.ts:96",{"_index":1012,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/shared/base/dto/base",{"_index":369,"title":{},"body":{"classes/BaseDtoClass.html":{},"coverage.html":{}}}],["src/shared/base/services/generic.service.ts",{"_index":543,"title":{},"body":{"injectables/CitiesService-1.html":{},"coverage.html":{}}}],["src/shared/base/services/generic.service.ts:12",{"_index":546,"title":{},"body":{"injectables/CitiesService-1.html":{}}}],["src/shared/base/services/generic.service.ts:16",{"_index":550,"title":{},"body":{"injectables/CitiesService-1.html":{}}}],["src/shared/base/services/generic.service.ts:24",{"_index":549,"title":{},"body":{"injectables/CitiesService-1.html":{}}}],["src/shared/base/services/generic.service.ts:28",{"_index":547,"title":{},"body":{"injectables/CitiesService-1.html":{}}}],["src/shared/base/services/generic.service.ts:32",{"_index":548,"title":{},"body":{"injectables/CitiesService-1.html":{}}}],["src/shared/base/services/generic.service.ts:7",{"_index":545,"title":{},"body":{"injectables/CitiesService-1.html":{}}}],["src/shared/constants/constants.ts",{"_index":1073,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/constants/files",{"_index":1074,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/decorators/roles.decorator",{"_index":457,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["src/shared/decorators/roles.decorator.ts",{"_index":1077,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/decorators/user.decorator.ts",{"_index":1078,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/exceptions/accept.exception.ts",{"_index":6,"title":{},"body":{"classes/AcceptedException.html":{},"coverage.html":{}}}],["src/shared/exceptions/accept.exception.ts:3",{"_index":15,"title":{},"body":{"classes/AcceptedException.html":{}}}],["src/shared/exceptions/errors.ts",{"_index":1079,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/filters/exceptions.filter.ts",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/shared/filters/exceptions.filter.ts:15",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/shared/guards/roles.guard.ts",{"_index":923,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/shared/guards/roles.guard.ts:6",{"_index":927,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/shared/guards/roles.guard.ts:9",{"_index":929,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/shared/helpers/upload",{"_index":1080,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/interceptors/delete",{"_index":609,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/interceptors/mongo",{"_index":749,"title":{},"body":{"injectables/MongoPointToObjectInterceptor.html":{},"coverage.html":{}}}],["src/shared/options/bcrypt.options.ts",{"_index":1084,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/options/class",{"_index":1085,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/options/elastic",{"_index":1088,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/options/jwt.options.ts",{"_index":1091,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/options/mongoose.options.ts",{"_index":1092,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/options/rate",{"_index":1093,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/options/swagger.options.ts",{"_index":1096,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/pipes/joi",{"_index":684,"title":{},"body":{"injectables/JoiValidatorPipe.html":{},"controllers/RestaurantsController.html":{},"coverage.html":{}}}],["src/shared/pipes/object",{"_index":754,"title":{},"body":{"injectables/ObjectToMongoPointPipe.html":{},"controllers/RestaurantsController.html":{},"coverage.html":{}}}],["src/shared/pipes/parse",{"_index":764,"title":{},"body":{"injectables/ParseToObjectPipe.html":{},"coverage.html":{}}}],["src/shared/schemas/geo",{"_index":1098,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/validators/extend",{"_index":949,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["stack",{"_index":1196,"title":{},"body":{"index.html":{}}}],["standards",{"_index":1201,"title":{},"body":{"index.html":{}}}],["startdescription",{"_index":1178,"title":{},"body":{"index.html":{}}}],["started",{"_index":1173,"title":{"index.html":{},"license.html":{}},"body":{}}],["startup",{"_index":1206,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1055,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["statistics",{"_index":805,"title":{},"body":{"controllers/RestaurantsController.html":{},"index.html":{}}}],["status",{"_index":704,"title":{},"body":{"injectables/JoiValidatorPipe.html":{},"controllers/UsersController.html":{}}}],["statuscode",{"_index":73,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["stop",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategies/jwt.strategy",{"_index":307,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":308,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":714,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":506,"title":{},"body":{"injectables/CitiesService.html":{}}}],["stream.on('close",{"_index":510,"title":{},"body":{"injectables/CitiesService.html":{}}}],["stream.on('data",{"_index":509,"title":{},"body":{"injectables/CitiesService.html":{}}}],["stream.on('error",{"_index":513,"title":{},"body":{"injectables/CitiesService.html":{}}}],["string",{"_index":11,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"injectables/DeleteFieldsInterceptor.html":{},"interfaces/IChangePassword.html":{},"interfaces/ICity.html":{},"interfaces/IMongoPoint.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":1241,"title":{},"body":{"index.html":{}}}],["subject",{"_index":1283,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1276,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1290,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":986,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["sum",{"_index":910,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["summary",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":26,"title":{},"body":{"classes/AcceptedException.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super@man.net",{"_index":965,"title":{},"body":{"classes/UserLoginDto.html":{},"miscellaneous/variables.html":{}}}],["super@man.net'})@isemail",{"_index":961,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["support",{"_index":1318,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1319,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1156,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":1097,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["system",{"_index":1187,"title":{},"body":{"index.html":{}}}],["system/elastic",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"injectables/CitiesService.html":{}}}],["system/security/auth/auth.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["system/security/users/users.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":1252,"title":{},"body":{"license.html":{}}}],["table",{"_index":1103,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1102,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":1179,"title":{},"body":{"index.html":{}}}],["technology",{"_index":1195,"title":{},"body":{"index.html":{}}}],["this.authservice.changepassword(user",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(userlogin",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.profile(user._id",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registernewuserdto",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":734,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.citiesservice.create(createcitydto",{"_index":462,"title":{},"body":{"controllers/CitiesController.html":{}}}],["this.citiesservice.delete(id",{"_index":469,"title":{},"body":{"controllers/CitiesController.html":{}}}],["this.citiesservice.getall",{"_index":463,"title":{},"body":{"controllers/CitiesController.html":{}}}],["this.citiesservice.getbyid(id",{"_index":466,"title":{},"body":{"controllers/CitiesController.html":{}}}],["this.citiesservice.update(id",{"_index":472,"title":{},"body":{"controllers/CitiesController.html":{}}}],["this.citymodel.create(city",{"_index":536,"title":{},"body":{"injectables/CitiesService.html":{}}}],["this.citymodel.createmapping(function(err",{"_index":526,"title":{},"body":{"injectables/CitiesService.html":{}}}],["this.citymodel.delete",{"_index":540,"title":{},"body":{"injectables/CitiesService.html":{}}}],["this.citymodel.essearch('name:alexandria').then(results",{"_index":535,"title":{},"body":{"injectables/CitiesService.html":{}}}],["this.citymodel.find",{"_index":541,"title":{},"body":{"injectables/CitiesService.html":{}}}],["this.citymodel.findone",{"_index":539,"title":{},"body":{"injectables/CitiesService.html":{}}}],["this.citymodel.findoneandupdate",{"_index":537,"title":{},"body":{"injectables/CitiesService.html":{}}}],["this.createadminifnotexists",{"_index":1021,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.fields",{"_index":639,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["this.fields.split",{"_index":641,"title":{},"body":{"injectables/DeleteFieldsInterceptor.html":{}}}],["this.joischema.validate(body[this.propertyname",{"_index":700,"title":{},"body":{"injectables/JoiValidatorPipe.html":{}}}],["this.jwtservice.sign",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.model.create(city",{"_index":553,"title":{},"body":{"injectables/CitiesService-1.html":{}}}],["this.model.delete",{"_index":556,"title":{},"body":{"injectables/CitiesService-1.html":{}}}],["this.model.find",{"_index":557,"title":{},"body":{"injectables/CitiesService-1.html":{}}}],["this.model.findone",{"_index":555,"title":{},"body":{"injectables/CitiesService-1.html":{}}}],["this.model.findoneandupdate",{"_index":554,"title":{},"body":{"injectables/CitiesService-1.html":{}}}],["this.propertyname",{"_index":758,"title":{},"body":{"injectables/ObjectToMongoPointPipe.html":{}}}],["this.reflector.get('roles",{"_index":932,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.restaurantmodel.aggregate",{"_index":897,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.restaurantmodel.create(restaurant",{"_index":894,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.restaurantmodel.find",{"_index":895,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.restaurantmodel.findone",{"_index":919,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.restaurantmodel.findoneanddelete",{"_index":920,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.restaurantmodel.findoneandupdate",{"_index":918,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.restaurantsservice.create(body",{"_index":854,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.restaurantsservice.delete(id",{"_index":864,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.restaurantsservice.getall",{"_index":855,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.restaurantsservice.getbyid(id",{"_index":863,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.restaurantsservice.groupbycity",{"_index":862,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.restaurantsservice.nearestrestaurant(body",{"_index":858,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.restaurantsservice.search(body.name",{"_index":860,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.restaurantsservice.update(id",{"_index":866,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.usermodel",{"_index":1028,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.create",{"_index":1044,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.create(user",{"_index":1025,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.create(user))._doc",{"_index":1023,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find({}).lean",{"_index":1040,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":1039,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.changepassword(authuser._id",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createduserdto",{"_index":989,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(user",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.delete(id",{"_index":991,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getall",{"_index":990,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyemail(authuser.email",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getbyemail(userlogin.email",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getbyemail(username",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getbyid(id",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":992,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["timestamp",{"_index":66,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["timestamps",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["title",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todo",{"_index":1216,"title":{},"body":{"index.html":{}}}],["tort",{"_index":1313,"title":{},"body":{"license.html":{}}}],["transform",{"_index":686,"title":{},"body":{"injectables/JoiValidatorPipe.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{}}}],["transform(body",{"_index":692,"title":{},"body":{"injectables/JoiValidatorPipe.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{}}}],["transformer",{"_index":958,"title":{},"body":{"classes/User.html":{},"dependencies.html":{}}}],["true",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CreateUserDto.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["trying",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tslint:disable",{"_index":401,"title":{},"body":{"classes/BaseDtoClass.html":{}}}],["type",{"_index":18,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"injectables/DeleteFieldsInterceptor.html":{},"injectables/ElasticSearchService.html":{},"interfaces/IChangePassword.html":{},"interfaces/ICity.html":{},"interfaces/ILocation.html":{},"interfaces/IMongoPoint.html":{},"interfaces/IRestaurant.html":{},"interfaces/IUser.html":{},"interfaces/IUserJWT.html":{},"injectables/JoiValidatorPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LocationDto.html":{},"injectables/MongoPointToObjectInterceptor.html":{},"injectables/ObjectToMongoPointPipe.html":{},"injectables/ParseToObjectPipe.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"controllers/RestaurantsController.html":{},"classes/RestaurantsSearchDto.html":{},"injectables/RestaurantsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["typeerror",{"_index":100,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["typeof",{"_index":27,"title":{},"body":{"classes/AcceptedException.html":{},"classes/AllExceptionsFilter.html":{}}}],["typescript",{"_index":1465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ui",{"_index":1157,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":1356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception('invalid",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":72,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["undefined})@isarray()@arraycontains(undefined)@arraynotempty",{"_index":598,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["undefined})@isarray()@arrayunique()@validarrayvalues(undefined",{"_index":945,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["unknown",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["unwind",{"_index":901,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["up",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["update(@param('_id",{"_index":471,"title":{},"body":{"controllers/CitiesController.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":446,"title":{},"body":{"controllers/CitiesController.html":{},"injectables/CitiesService.html":{},"injectables/CitiesService-1.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatecitydto",{"_index":447,"title":{},"body":{"controllers/CitiesController.html":{}}}],["updatedat",{"_index":375,"title":{},"body":{"classes/BaseDtoClass.html":{},"classes/CityDto.html":{},"classes/CreateUserDto.html":{},"classes/RestaurantDto.html":{},"classes/UpdateUserDto.html":{}}}],["updateduser",{"_index":1027,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":940,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["upload",{"_index":846,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["upload.ts",{"_index":1075,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploaded",{"_index":1366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uploadedfile",{"_index":825,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["uploadedfilebiggerthanmaximumallowedfilelimit",{"_index":1365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uploadedfiletype",{"_index":852,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["uploadfile",{"_index":838,"title":{},"body":{"controllers/RestaurantsController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["uploadfile(undefined",{"_index":1168,"title":{},"body":{"miscellaneous/functions.html":{}}}],["uploads",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["use",{"_index":1271,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["usecreateindex",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefindandmodify",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('jwt",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CitiesController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('local",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(fileinterceptor('image",{"_index":844,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["useinterceptors(new",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["usenewurlparser",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":213,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterNewUserDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user'})@isstring",{"_index":943,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user'})@matches(/^.{6",{"_index":417,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["user._id",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":587,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":944,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:13",{"_index":770,"title":{},"body":{"classes/RegisterNewUserDto.html":{}}}],["user.dto.ts:16",{"_index":942,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:17",{"_index":594,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:20",{"_index":772,"title":{},"body":{"classes/RegisterNewUserDto.html":{}}}],["user.dto.ts:22",{"_index":592,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":946,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:27",{"_index":595,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterNewUserDto.html":{}}}],["user.dto.ts:29",{"_index":774,"title":{},"body":{"classes/RegisterNewUserDto.html":{}}}],["user.dto.ts:32",{"_index":590,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:42",{"_index":599,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":771,"title":{},"body":{"classes/RegisterNewUserDto.html":{}}}],["user.email",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.roles",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["user.roles.some(role",{"_index":938,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.ts",{"_index":682,"title":{},"body":{"interfaces/IUserJWT.html":{},"coverage.html":{}}}],["user@mail.com",{"_index":604,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user@mail.com'})@isemail",{"_index":591,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["userdeleted",{"_index":1036,"title":{},"body":{"injectables/UsersService.html":{}}}],["userexisted",{"_index":1034,"title":{},"body":{"injectables/UsersService.html":{}}}],["userlogin",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["userlogindto",{"_index":220,"title":{"classes/UserLoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{},"coverage.html":{}}}],["usermodel",{"_index":1005,"title":{},"body":{"injectables/UsersService.html":{}}}],["usermodel.createmapping((err",{"_index":1022,"title":{},"body":{"injectables/UsersService.html":{}}}],["username",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"modules/ElasticSearchModule.html":{},"injectables/LocalStrategy.html":{}}}],["userroles",{"_index":596,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["users",{"_index":969,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["users.controller",{"_index":999,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":980,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/interfaces/user.interface",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":303,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/users.service",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["userschema",{"_index":997,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":967,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":135,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":320,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["useunifiedtopology",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":1464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validarrayvalues",{"_index":948,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validarrayvalues(['admin",{"_index":950,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["validarrayvalues(values",{"_index":1169,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validate",{"_index":708,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":710,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":730,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validatenested",{"_index":788,"title":{},"body":{"classes/RestaurantDto.html":{}}}],["validateontype",{"_index":1363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validateuser",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationerror",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["validationoptions",{"_index":1170,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validations/location.joi",{"_index":836,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["validator",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BaseDtoClass.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LocationDto.html":{},"classes/RegisterNewUserDto.html":{},"classes/RestaurantDto.html":{},"classes/RestaurantsSearchDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserLoginDto.html":{},"dependencies.html":{}}}],["validator.options.ts",{"_index":1086,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validator.pipe",{"_index":840,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["validator.pipe.ts",{"_index":685,"title":{},"body":{"injectables/JoiValidatorPipe.html":{},"coverage.html":{}}}],["validator.pipe.ts:11",{"_index":690,"title":{},"body":{"injectables/JoiValidatorPipe.html":{}}}],["validator.pipe.ts:17",{"_index":695,"title":{},"body":{"injectables/JoiValidatorPipe.html":{}}}],["validator.ts",{"_index":1101,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["validators",{"_index":1246,"title":{},"body":{"index.html":{}}}],["value",{"_index":77,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/JoiValidatorPipe.html":{},"classes/RegisterNewUserDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["valuebasic",{"_index":111,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["valuebasic[2",{"_index":114,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["values",{"_index":1171,"title":{},"body":{"miscellaneous/functions.html":{}}}],["variable",{"_index":404,"title":{},"body":{"classes/BaseDtoClass.html":{},"coverage.html":{}}}],["variables",{"_index":1325,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseDtoClass.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["w.\"]+)/.exec(exception.message",{"_index":110,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["w@.]+)/.exec(exception.message",{"_index":112,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["waiting",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warranties",{"_index":1297,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1293,"title":{},"body":{"license.html":{}}}],["web",{"_index":1237,"title":{},"body":{"index.html":{}}}],["week",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whether",{"_index":1310,"title":{},"body":{"license.html":{}}}],["windowms",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["within",{"_index":806,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["without",{"_index":1266,"title":{},"body":{"license.html":{}}}],["write",{"_index":1208,"title":{},"body":{"index.html":{}}}],["writing",{"_index":1202,"title":{},"body":{"index.html":{}}}],["xbitmap",{"_index":1391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xp",{"_index":1143,"title":{},"body":{"dependencies.html":{}}}],["xpixmap",{"_index":1392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xwindowdump",{"_index":1393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yes",{"_index":21,"title":{},"body":{"classes/AcceptedException.html":{},"injectables/ObjectToMongoPointPipe.html":{},"miscellaneous/functions.html":{}}}],["zoom",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CitiesModule.html":{},"modules/CountriesModule.html":{},"modules/ElasticSearchModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AcceptedException.html":{"url":"classes/AcceptedException.html","title":"class - AcceptedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AcceptedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/exceptions/accept.exception.ts\n        \n\n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message?: string | object)\n                    \n                \n                        \n                            \n                                Defined in src/shared/exceptions/accept.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string | object\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, HttpException } from '@nestjs/common';\n\nexport class AcceptedException extends HttpException {\n  constructor(message?: string | object) {\n    super(\n      (message && (typeof message === 'string' ? { message } : message)) || {\n        message: 'Accepted',\n      },\n      HttpStatus.ACCEPTED,\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/filters/exceptions.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/filters/exceptions.filter.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  Logger,\n  BadRequestException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  catch(exception: any /* unknown */, host: ArgumentsHost) {\n    console.log({\n      exceptionConstructorName: exception.constructor.name,\n      isHttpError: exception instanceof HttpException,\n      exception,\n    });\n\n    const ctx = host.switchToHttp();\n    const req = ctx.getRequest();\n    const res = ctx.getResponse();\n\n    let jsonRes = {\n      // timestamp: new Date().toISOString(),\n      path: req.url,\n      error: undefined,\n      statusCode: exception.status,\n      message: null,\n      key: undefined,\n      value: undefined,\n    };\n    if (exception instanceof HttpException) {\n      jsonRes.statusCode = exception.getStatus();\n\n      if (typeof exception.message === 'object') {\n        // Destruct object property of message is nested object\n        for (const property in exception.message) {\n          if (exception.message.hasOwnProperty(property)) {\n            jsonRes[property] = exception.message[property];\n          }\n        }\n      } else {\n        // Or just pass the message if it's a string\n        jsonRes.message = exception.message;\n      }\n\n      // Class validator handler\n      if (exception instanceof BadRequestException) {\n        if (\n          exception.message &&\n          Array.isArray(exception.message.message) &&\n          exception.message.message[0] instanceof ValidationError\n        ) {\n          jsonRes.key = exception.message.message[0].property;\n          jsonRes.value = exception.message.message[0].value;\n          jsonRes.message = Object.values(\n            exception.message.message[0].constraints,\n          )[0];\n        }\n      }\n    } else if (exception instanceof TypeError) {\n      jsonRes.error = 'Not Found';\n      jsonRes.statusCode = 404;\n      // jsonRes.message= exception.message;\n    } else if (exception.constructor.name === 'MongoError') {\n      // if ([11000, 11001].indexOf(exception.code) >= 0) { // Duplication error\n      jsonRes.statusCode = HttpStatus.CONFLICT;\n\n      const keyBasic = /(!?index: )([\\w.\"]+)/.exec(exception.message);\n      const valueBasic = /({ : )([('\")\\w@.]+)/.exec(exception.message);\n      jsonRes.key = keyBasic && keyBasic[2];\n      jsonRes.value = valueBasic && valueBasic[2];\n      jsonRes.message = 'Duplication Error';\n      // }\n    } else {\n      jsonRes.message = exception.message;\n    }\n\n    if (!jsonRes.statusCode && !exception.status) {\n      Logger.log('Unhandled type of errors');\n    }\n\n    res.status(jsonRes.statusCode || exception.status || 500).json(jsonRes);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCitiesModule\n\nCitiesModule\n\nAppModule -->\n\nCitiesModule->AppModule\n\n\n\n\n\nCountriesModule\n\nCountriesModule\n\nAppModule -->\n\nCountriesModule->AppModule\n\n\n\n\n\nElasticSearchModule\n\nElasticSearchModule\n\nAppModule -->\n\nElasticSearchModule->AppModule\n\n\n\n\n\nRestaurantsModule\n\nRestaurantsModule\n\nAppModule -->\n\nRestaurantsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CitiesModule\n                        \n                        \n                            CountriesModule\n                        \n                        \n                            ElasticSearchModule\n                        \n                        \n                            RestaurantsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { RestaurantsModule } from './general/restaurants/restaurants.module';\nimport { CitiesModule } from './general/cities/cities.module';\nimport { UsersModule } from './system/security/users/users.module';\nimport { AuthModule } from './system/security/auth/auth.module';\nimport { mongooseOptions } from './../shared/options/mongoose.options';\nimport { constants } from './../shared/constants/constants';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Module } from '@nestjs/common';\nimport { join } from 'path';\nimport { ServeStaticModule } from '@nestjs/serve-static';\n\n// import { ElasticsearchModule } from '@nestjs/elasticsearch';\nimport { ElasticSearchModule } from './system/elastic-search/elastic-search.module';\n\nimport { plugin } from 'mongoose';\nimport { CountriesModule } from './general/countries/countries.module';\n\nimport * as mongooseUpdateDocumentVersion from 'mongoose-update-document-version';\nplugin(mongooseUpdateDocumentVersion);\n\nimport * as timestamps from 'mongoose-timestamp';\nplugin(timestamps);\n\nimport * as mongooseDelete from 'mongoose-delete';\nplugin(mongooseDelete, {\n  deletedAt: true,\n});\n\n@Module({\n  imports: [\n    /* Mongoose DB connection Init */\n    MongooseModule.forRoot(\n      process.env.DB_URI.replace('{{dbName}}', process.env.DATABASE_NAME),\n      mongooseOptions,\n    ),\n\n    /* Elastic-search */\n    ElasticSearchModule,\n    /* ElasticsearchModule.register({\n      node: 'http://127.0.0.1:9200',\n    }), */\n\n    /* Serve static files at Public [eg: index.html, uploads] */\n    ServeStaticModule.forRoot({\n      rootPath: join('.', 'public'),\n    }),\n\n    /* App Modules */\n    AuthModule,\n    UsersModule,\n    CitiesModule,\n    RestaurantsModule,\n    CountriesModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/system/security/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changePassword\n                            \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                profile\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \nchangePassword(user: IUserJWT, changePasswordDto: ChangePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('change-password')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Change user password', description: 'End-Point for change user password'})\n                \n            \n\n            \n                \n                    Defined in src/modules/system/security/auth/auth.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUserJWT\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    changePasswordDto\n                                    \n                                                ChangePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(userLogin: UserLoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiOperation({summary: 'Login user', description: 'End-Point for login user'})\n                \n            \n\n            \n                \n                    Defined in src/modules/system/security/auth/auth.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userLogin\n                                    \n                                                UserLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \nlogout(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Logout user', description: 'End-Point for logout user'})\n                \n            \n\n            \n                \n                    Defined in src/modules/system/security/auth/auth.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            profile\n                        \n                        \n                    \n                \n            \n            \n                \nprofile(user: IUserJWT)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('profile')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Register new user', description: 'End-Point for register new user'})\n                \n            \n\n            \n                \n                    Defined in src/modules/system/security/auth/auth.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUserJWT\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registerNewUserDto: RegisterNewUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiOperation({summary: 'Register new user', description: 'End-Point for register new user'})\n                \n            \n\n            \n                \n                    Defined in src/modules/system/security/auth/auth.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registerNewUserDto\n                                    \n                                                RegisterNewUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { User } from './../../../../shared/decorators/user.decorator';\nimport { bcryptOptions } from './../../../../shared/options/bcrypt.options';\nimport { errors } from '../../../../shared/exceptions/errors';\nimport { DeleteFieldsInterceptor } from './../../../../shared/interceptors/delete-fields.interceptor';\nimport { RegisterNewUserDto } from './dto/register-new-user.dto';\nimport { IUserJWT } from './interfaces/jwt-user';\nimport { ChangePasswordDto } from './dto/change-password-dto';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\nimport { UserLoginDto } from './dto/user-login.dto';\nimport { ApiTags, ApiOperation, ApiBearerAuth } from '@nestjs/swagger';\nimport {\n  Controller,\n  Post,\n  Body,\n  UseGuards,\n  Req,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { hash } from 'bcryptjs';\n\n@ApiTags('Auth')\n@Controller('auth')\n@UseInterceptors(new DeleteFieldsInterceptor('password'))\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  // @UseGuards(AuthGuard('local'))\n  @Post('login')\n  @ApiOperation({\n    summary: 'Login user',\n    description: 'End-Point for login user',\n  })\n  login(@Body() userLogin: UserLoginDto) {\n    return this.authService.login(userLogin);\n  }\n\n  @Post('logout')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Logout user',\n    description: 'End-Point for logout user',\n  })\n  logout(@Req() req) {\n    req.cookies.jwt = { maxAge: Date.now() };\n    return {};\n  }\n\n  @Post('register')\n  @ApiOperation({\n    summary: 'Register new user',\n    description: 'End-Point for register new user',\n  })\n  async register(@Body() registerNewUserDto: RegisterNewUserDto) {\n    if (registerNewUserDto.password !== registerNewUserDto.confirmPassword) {\n      throw errors.invalidPasswordConfirmation;\n    } else {\n      registerNewUserDto.password = await hash(\n        registerNewUserDto.password,\n        bcryptOptions.rounds,\n      );\n      return this.authService.register(registerNewUserDto);\n    }\n  }\n\n  @Post('profile')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Register new user',\n    description: 'End-Point for register new user',\n  })\n  profile(@User() user: IUserJWT) {\n    return this.authService.profile(user._id);\n  }\n\n  @Post('change-password')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Change user password',\n    description: 'End-Point for change user password',\n  })\n  changePassword(\n    @User() user: IUserJWT,\n    @Body() changePasswordDto: ChangePasswordDto,\n  ) {\n    return this.authService.changePassword(user, changePasswordDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/system/security/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { jwtOptions } from './../../../../shared/options/jwt.options';\nimport { Module, Logger } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from './../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtOptions.secret,\n      signOptions: jwtOptions.signOptions,\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/system/security/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                profile\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/system/security/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(authUser: IUserJWT, incomePasswords: ChangePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/system/security/auth/auth.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authUser\n                                    \n                                                IUserJWT\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    incomePasswords\n                                    \n                                                ChangePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(userLogin)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/system/security/auth/auth.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userLogin\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            profile\n                        \n                        \n                    \n                \n            \n            \n                \nprofile(id: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/system/security/auth/auth.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: IUser)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/system/security/auth/auth.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/system/security/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { bcryptOptions } from './../../../../shared/options/bcrypt.options';\nimport { errors } from '../../../../shared/exceptions/errors';\nimport { ChangePasswordDto } from './dto/change-password-dto';\nimport { ObjectId } from 'mongoose';\nimport { IUser } from './../users/interfaces/user.interface';\nimport { UsersService } from './../users/users.service';\nimport { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { compare, hash } from 'bcryptjs';\nimport { IUserJWT } from './interfaces/jwt-user';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  async validateUser(username: string, pass: string) {\n    const user = await this.usersService.getByEmail(username);\n    if (user && user.password === pass) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(userLogin) {\n    const user = await this.usersService.getByEmail(userLogin.email);\n    if (user) {\n      const isPassCorrect = await compare(userLogin.password, user.password);\n      if (isPassCorrect) {\n        return {\n          jwt_bearer_token:\n            /*  'Bearer ' + */\n            this.jwtService.sign({\n              _id: user._id,\n              email: user.email,\n              roles: user.roles,\n            }),\n        };\n      } else {\n        throw errors.invalidEmailOrPassword;\n      }\n    } else {\n      throw errors.invalidEmailOrPassword;\n    }\n  }\n\n  async register(user: IUser) {\n    const { password, ...createdUser } = await this.usersService.create(user);\n    return createdUser;\n  }\n\n  profile(id: ObjectId) {\n    return this.usersService.getById(id);\n  }\n\n  async changePassword(authUser: IUserJWT, incomePasswords: ChangePasswordDto) {\n    if (incomePasswords.newPassword !== incomePasswords.confirmNewPassword) {\n      throw errors.invalidNewPassConfirmation;\n    } else {\n      const user = await this.usersService.getByEmail(authUser.email);\n      if (user) {\n        const isValidOldPassword = await compare(\n          incomePasswords.oldPassword,\n          user.password,\n        );\n        if (isValidOldPassword) {\n          const hashedPassword = await hash(\n            incomePasswords.newPassword,\n            bcryptOptions.rounds,\n          );\n          return await this.usersService.changePassword(authUser._id, {\n            password: hashedPassword,\n          });\n        } else {\n          throw errors.invalidPassword;\n        }\n      } else {\n        throw errors.invalidPassword;\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseDtoClass.html":{"url":"classes/BaseDtoClass.html","title":"class - BaseDtoClass","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseDtoClass\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/base/dto/base-dto.class.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                __v\n                            \n                            \n                                    Readonly\n                                    Optional\n                                _id\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deleted\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            __v\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/base/dto/base-dto.class.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/base/dto/base-dto.class.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/base/dto/base-dto.class.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deleted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/base/dto/base-dto.class.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'document name', description: 'Name of the document'})@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/shared/base/dto/base-dto.class.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/base/dto/base-dto.class.ts:36\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ObjectId } from 'mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsMongoId, IsNumber, IsNotEmpty, IsOptional } from 'class-validator';\n\nexport class BaseDtoClass {\n  //   @ApiProperty({\n  //     example: '000000000000000000000000',\n  //     description:\n  //       'Mongo id of the document, Hex [0-9,a-f], 24 letter alphanumeric',\n  //   })\n  //   @IsMongoId()\n  //   @IsOptional()\n  // tslint:disable-next-line: variable-name\n  readonly _id?: ObjectId;\n\n  // Version\n  //   @ApiProperty({\n  //     example: 0,\n  //     description: 'Version of the document',\n  //   })\n  //   @IsNumber()\n  // tslint:disable-next-line: variable-name\n  readonly __v?: number;\n\n  // Name\n  @ApiProperty({\n    example: 'document name',\n    description: 'Name of the document',\n  })\n  @IsNotEmpty()\n  readonly name: string;\n\n  deleted?: boolean;\n\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/system/security/auth/dto/change-password-dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                confirmNewPassword\n                            \n                            \n                                    Readonly\n                                newPassword\n                            \n                            \n                                    Readonly\n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            confirmNewPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'newPass'})@Matches(/^.{6,}$/, {message: 'Password at least 6'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/auth/dto/change-password-dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            newPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'newPass'})@Matches(/^.{6,}$/, {message: 'Password at least 6'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/auth/dto/change-password-dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            oldPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'oldPass', description: 'Old authorized password of user'})@Matches(/^.{6,}$/, {message: 'Password at least 6'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/auth/dto/change-password-dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches, IsEnum, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ChangePasswordDto {\n  // Password\n  @ApiProperty({\n    example: 'oldPass',\n    description: 'Old authorized password of user',\n  })\n  @Matches(/^.{6,}$/, { message: 'Password at least 6' })\n  readonly oldPassword: string;\n\n  // Password\n  @ApiProperty({\n    example: 'newPass',\n  })\n  @Matches(/^.{6,}$/, { message: 'Password at least 6' })\n  readonly newPassword: string;\n\n  // Confirm password\n  @ApiProperty({\n    example: 'newPass',\n  })\n  @Matches(/^.{6,}$/, { message: 'Password at least 6' })\n  readonly confirmNewPassword: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CitiesController.html":{"url":"controllers/CitiesController.html","title":"controller - CitiesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CitiesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/general/cities/cities.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                cities\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                getById\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createCityDto: CityDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Roles('admin')@ApiOperation({summary: 'Create city', description: 'End-Point for create city'})\n                \n            \n\n            \n                \n                    Defined in src/modules/general/cities/cities.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCityDto\n                                    \n                                                CityDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':_id')@Roles('admin')@ApiOperation({summary: 'Delete city by id', description: 'End-Point for delete city by id'})\n                \n            \n\n            \n                \n                    Defined in src/modules/general/cities/cities.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all cities', description: 'End-Point for get all cities'})\n                \n            \n\n            \n                \n                    Defined in src/modules/general/cities/cities.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \ngetById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':_id')@Roles('admin')@ApiOperation({summary: 'Get city by id', description: 'End-Point for get city by id'})\n                \n            \n\n            \n                \n                    Defined in src/modules/general/cities/cities.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateCityDto: CityDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':_id')@Roles('admin')@ApiOperation({summary: 'Update city by id', description: 'End-Point for update city by id'})\n                \n            \n\n            \n                \n                    Defined in src/modules/general/cities/cities.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCityDto\n                                    \n                                                CityDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { RolesGuard } from './../../../shared/guards/roles.guard';\nimport { AuthGuard } from '@nestjs/passport';\nimport { CityDto } from './dto/city.dto';\nimport { CitiesService } from './cities.service';\nimport {\n  Controller,\n  Post,\n  Get,\n  Delete,\n  Put,\n  Param,\n  Body,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiTags, ApiBearerAuth, ApiOperation } from '@nestjs/swagger';\nimport { Roles } from 'src/shared/decorators/roles.decorator';\n\n@ApiTags('Cities')\n@UseGuards(AuthGuard('jwt'), RolesGuard)\n@ApiBearerAuth()\n@Controller('cities')\nexport class CitiesController {\n  constructor(private readonly citiesService: CitiesService) {}\n\n  @Post()\n  @Roles('admin')\n  @ApiOperation({\n    summary: 'Create city',\n    description: 'End-Point for create city',\n  })\n  create(@Body() createCityDto: CityDto) {\n    return this.citiesService.create(createCityDto);\n  }\n\n  @Get()\n  @ApiOperation({\n    summary: 'Get all cities',\n    description: 'End-Point for get all cities',\n  })\n  findAll() {\n    return this.citiesService.getAll();\n  }\n\n  @Get(':_id')\n  @Roles('admin')\n  @ApiOperation({\n    summary: 'Get city by id',\n    description: 'End-Point for get city by id',\n  })\n  getById(@Param('_id') id: string) {\n    return this.citiesService.getById(id);\n  }\n\n  @Delete(':_id')\n  @Roles('admin')\n  @ApiOperation({\n    summary: 'Delete city by id',\n    description: 'End-Point for delete city by id',\n  })\n  delete(@Param('_id') id: string) {\n    return this.citiesService.delete(id);\n  }\n\n  @Put(':_id')\n  @Roles('admin')\n  @ApiOperation({\n    summary: 'Update city by id',\n    description: 'End-Point for update city by id',\n  })\n  update(@Param('_id') id: string, @Body() updateCityDto: CityDto) {\n    return this.citiesService.update(id, updateCityDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CitiesModule.html":{"url":"modules/CitiesModule.html","title":"module - CitiesModule","body":"\n                   \n\n\n\n\n    Modules\n    CitiesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CitiesModule\n\n\n\ncluster_CitiesModule_providers\n\n\n\n\nCitiesService\n\nCitiesService\n\n\n\nCitiesModule\n\nCitiesModule\n\nCitiesModule -->\n\nCitiesService->CitiesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/general/cities/cities.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CitiesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CitiesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CitiesService } from './cities.service';\nimport { CitiesController } from './cities.controller';\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { CitySchema } from './schemas/city.schema';\n\n@Module({\n  imports: [\n    // Mongoose: register city model\n    MongooseModule.forFeature([\n      {\n        name: 'City',\n        schema: CitySchema,\n      },\n    ]),\n  ],\n  controllers: [CitiesController],\n  providers: [CitiesService],\n})\nexport class CitiesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CitiesService.html":{"url":"injectables/CitiesService.html","title":"injectable - CitiesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CitiesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/general/cities/cities.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getAll\n                            \n                            \n                                getById\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cityModel: Model, elasticSearchService: ElasticSearchService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/general/cities/cities.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cityModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        elasticSearchService\n                                                  \n                                                        \n                                                                        ElasticSearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(city: ICity)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/general/cities/cities.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    city\n                                    \n                                                ICity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/general/cities/cities.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/general/cities/cities.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \ngetById(id)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/general/cities/cities.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, city: ICity)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/general/cities/cities.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    city\n                                    \n                                                ICity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ElasticSearchModule } from './../../system/elastic-search/elastic-search.module';\nimport { ElasticSearchService } from './../../system/elastic-search/elastic-search.service';\nimport { ICity } from './interfaces/city.interface';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n@Injectable()\nexport class CitiesService {\n  constructor(\n    @InjectModel('City')\n    private readonly cityModel: Model,\n    elasticSearchService: ElasticSearchService,\n  ) {\n    // console.log({ cityModel });\n\n    // console.log(elasticSearchService);\n\n    // cityModel.create(\n    //   { name: 'alexandria' },\n    //   (err, data) => {},\n    //   // console.log({ err, data }),\n    // );\n\n    /* cityModel.createMapping((err, mapping) => {\n      if (err) {\n        console.log({ err }, 'mapping');\n      } else {\n        console.log({ mapping });\n      }\n    }); */\n\n    // const stream = cityModel.synchronize();\n    // let count = 0;\n    // stream.on('data', (err, data) => {\n    //   console.log({ err, data });\n    //   count++;\n    // });\n    // stream.on('close', () => {\n    //   console.log({ count: 'Indexes ' + count + ' documents' });\n    // });\n    // stream.on('error', err => {\n    //   console.log({ errorAtSynchronizeMongoose: err });\n    // });\n\n    // cityModel.search(\n    //   {\n    //     query_string: {\n    //       query: `*${'cai'}*`,\n    //     },\n    //   },\n    //   (err, results) => {\n    //     if (results && results.hits && results.hits.hits) {\n    //       /* console.log({\n    //         results: */ results.hits.hits.map(doc =>\n    //         doc\n    //           ? {\n    //               _id: doc._id,\n    //               ...doc._source,\n    //             }\n    //           : {},\n    //       ); /* ,\n    //       }); */\n    //     }\n    //   },\n    // );\n\n    // cityModel.find({}, (err, data) => {\n    //   console.log({ err, data });\n    // });\n\n    // this.cityModel.createMapping(function(err, mapping) {\n    //   if (err) {\n    //     console.log('error creating mapping (you can safely ignore this)');\n    //     console.log(err);\n    //   } else {\n    //     console.log('mapping created!');\n    //     console.log(mapping);\n    //   }\n    // });\n    // this.cityModel.esSearch('name:alexandria').then(results => {\n    //   console.log({ results });\n    // });\n  }\n\n  create(city: ICity) {\n    return this.cityModel.create(city);\n  }\n\n  update(id: string, city: ICity) {\n    return this.cityModel.findOneAndUpdate(\n      { _id: id },\n      { $set: city },\n      { new: true },\n    );\n  }\n\n  getById(id) {\n    return this.cityModel.findOne({ _id: id });\n  }\n\n  delete(id) {\n    return this.cityModel.delete({ _id: id });\n  }\n\n  getAll() {\n    return this.cityModel.find();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CitiesService-1.html":{"url":"injectables/CitiesService-1.html","title":"injectable - CitiesService-1","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CitiesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/base/services/generic.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getAll\n                            \n                            \n                                getById\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model)\n                    \n                \n                        \n                            \n                                Defined in src/shared/base/services/generic.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(city)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/base/services/generic.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    city\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/base/services/generic.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n            \n                \n                    Defined in src/shared/base/services/generic.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \ngetById(id)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/base/services/generic.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, city)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/base/services/generic.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    city\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ElasticSearchService } from './../../../modules/system/elastic-search/elastic-search.service';\n\nimport { Injectable, Logger } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n@Injectable()\nexport class CitiesService {\n  constructor(/* private */ readonly model /* : Model */) {\n    console.log(this.model);\n  }\n\n  create(city) {\n    return this.model.create(city);\n  }\n\n  update(id: string, city) {\n    return this.model.findOneAndUpdate(\n      { _id: id },\n      { $set: city },\n      { new: true },\n    );\n  }\n\n  getById(id) {\n    return this.model.findOne({ _id: id });\n  }\n\n  delete(id) {\n    return this.model.delete({ _id: id });\n  }\n\n  getAll() {\n    return this.model.find();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CityDto.html":{"url":"classes/CityDto.html","title":"class - CityDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CityDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/general/cities/dto/city.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BaseDtoClass\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                __v\n                            \n                            \n                                    Readonly\n                                    Optional\n                                _id\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deleted\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            __v\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:14\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deleted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:33\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'document name', description: 'Name of the document'})@IsNotEmpty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:31\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:36\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseDtoClass } from '../../../../shared/base/dto/base-dto.class';\n\nexport class CityDto extends BaseDtoClass {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CountriesController.html":{"url":"controllers/CountriesController.html","title":"controller - CountriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CountriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/general/countries/countries.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                countries\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { CountriesService } from './countries.service';\nimport { CountrySchema } from './models/country.model';\nimport { Controller } from '@nestjs/common';\nimport { Crud } from '@nestjsx/crud';\nimport { models } from 'mongoose';\n\nconsole.log({ countriesService: CountriesService });\n// @Crud({ model: })\n@Controller('countries')\nexport class CountriesController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CountriesModule.html":{"url":"modules/CountriesModule.html","title":"module - CountriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CountriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_providers\n\n\n\n\nCountriesService\n\nCountriesService\n\n\n\nCountriesModule\n\nCountriesModule\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/general/countries/countries.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CountriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CountrySchema } from './models/country.model';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Module } from '@nestjs/common';\nimport { CountriesService } from './countries.service';\nimport { CountriesController } from './countries.controller';\n\n@Module({\n  imports: [\n    // Mongoose: register city model\n    MongooseModule.forFeature([\n      {\n        name: 'Country',\n        schema: CountrySchema,\n      },\n    ]),\n  ],\n  providers: [CountriesService],\n  controllers: [CountriesController],\n})\nexport class CountriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CountriesService.html":{"url":"injectables/CountriesService.html","title":"injectable - CountriesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CountriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/general/countries/countries.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class CountriesService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/system/security/users/dto/create-user.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BaseDtoClass\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                    Readonly\n                                    Optional\n                                __v\n                            \n                            \n                                    Readonly\n                                    Optional\n                                _id\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deleted\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            confirmPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'password123'})@Matches(/^.{6,}$/, {message: 'Password at least 6'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/users/dto/create-user.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'user@mail.com'})@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/users/dto/create-user.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'user name'})@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/users/dto/create-user.dto.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'password123'})@Matches(/^.{6,}$/, {message: 'Password at least 6'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/users/dto/create-user.dto.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRoles[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({isArray: true, example: undefined})@IsArray()@ArrayContains(undefined)@ArrayNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/users/dto/create-user.dto.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            __v\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:14\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deleted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:33\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'document name', description: 'Name of the document'})@IsNotEmpty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:31\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:36\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseDtoClass } from './../../../../../shared/base/dto/base-dto.class';\nimport { UserRoles } from './../enum/roles.enums';\nimport { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  Matches,\n  IsString,\n  IsArray,\n  ArrayContains,\n  ArrayNotEmpty,\n} from 'class-validator';\n\nexport class CreateUserDto extends BaseDtoClass {\n  // Name\n  @ApiProperty({ example: 'user name' })\n  @IsString()\n  name: string;\n\n  // Email\n  @ApiProperty({ example: 'user@mail.com' })\n  @IsEmail()\n  email: string;\n\n  // Password\n  @ApiProperty({ example: 'password123' })\n  @Matches(/^.{6,}$/, { message: 'Password at least 6' })\n  password: string;\n\n  // Confirm password\n  @ApiProperty({ example: 'password123' })\n  @Matches(/^.{6,}$/, { message: 'Password at least 6' })\n  confirmPassword: string;\n\n  // Role\n  @ApiProperty({\n    isArray: true,\n    example: ['user', 'admin'],\n  })\n  @IsArray()\n  @ArrayContains(['user', 'admin'])\n  @ArrayNotEmpty()\n  roles: UserRoles[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DeleteFieldsInterceptor.html":{"url":"injectables/DeleteFieldsInterceptor.html","title":"injectable - DeleteFieldsInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DeleteFieldsInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/interceptors/delete-fields.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fields: string | string[])\n                    \n                \n                        \n                            \n                                Defined in src/shared/interceptors/delete-fields.interceptor.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fields\n                                                  \n                                                        \n                                                                    string | string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/interceptors/delete-fields.interceptor.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n// Delete the field from the object\nfunction deleting(object: object, fieldName: string) {\n  delete object[fieldName];\n  return object;\n}\n\n// Decide if data is object or array to delete from\nfunction deleteFromArrayOfSingleObject(data: object | object[], field: string) {\n  if (Array.isArray(data)) {\n    return data.map(object => {\n      return deleting(object, field);\n    });\n  } else {\n    return deleting(data, field);\n  }\n}\n\n@Injectable()\nexport class DeleteFieldsInterceptor implements NestInterceptor {\n  constructor(private fields: string | string[]) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map(data => {\n        if (Array.isArray(this.fields)) {\n          for (const field of this.fields) {\n            deleteFromArrayOfSingleObject(data, field);\n          }\n        } else {\n          const isCompaniedFields = this.fields.split(' ');\n          if (isCompaniedFields.length > 1) {\n            for (const field of isCompaniedFields) {\n              deleteFromArrayOfSingleObject(data, field);\n            }\n          } else {\n            deleteFromArrayOfSingleObject(data, this.fields);\n          }\n        }\n        return data;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ElasticSearchModule.html":{"url":"modules/ElasticSearchModule.html","title":"module - ElasticSearchModule","body":"\n                   \n\n\n\n\n    Modules\n    ElasticSearchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ElasticSearchModule\n\n\n\ncluster_ElasticSearchModule_exports\n\n\n\ncluster_ElasticSearchModule_providers\n\n\n\n\nElasticSearchService \n\nElasticSearchService \n\n\n\nElasticSearchModule\n\nElasticSearchModule\n\nElasticSearchService  -->\n\nElasticSearchModule->ElasticSearchService \n\n\n\n\n\nElasticSearchService\n\nElasticSearchService\n\nElasticSearchModule -->\n\nElasticSearchService->ElasticSearchModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/system/elastic-search/elastic-search.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ElasticSearchService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ElasticSearchService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ElasticsearchModule } from '@nestjs/elasticsearch';\nimport { Module, Global } from '@nestjs/common';\nimport { ElasticSearchService } from './elastic-search.service';\n\n@Global()\n@Module({\n  imports: [\n    ElasticsearchModule.register({\n      node: process.env.ES_URI,\n      // auth: { username: 'elastic', password: 'npCPcSx8drRLSkszRdxDmBZo' },\n    }),\n  ],\n  providers: [ElasticSearchService],\n  exports: [ElasticSearchService],\n})\nexport class ElasticSearchModule {\n  constructor() {\n    \n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ElasticSearchService.html":{"url":"injectables/ElasticSearchService.html","title":"injectable - ElasticSearchService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ElasticSearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/system/elastic-search/elastic-search.service.ts\n        \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elasticsearchService: ElasticsearchService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/system/elastic-search/elastic-search.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elasticsearchService\n                                                  \n                                                        \n                                                                    ElasticsearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ElasticsearchService } from '@nestjs/elasticsearch';\n\n@Injectable()\nexport class ElasticSearchService {\n  constructor(private readonly elasticsearchService: ElasticsearchService) {\n    (async function() {\n      const search = await elasticsearchService.search();\n      console.log(\n        search.body.hits.hits.map(obj => ({ _id: obj._id, ...obj._source })),\n      );\n    })();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChangePassword.html":{"url":"interfaces/IChangePassword.html","title":"interface - IChangePassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChangePassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/system/security/auth/interfaces/change-password.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        password\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IChangePassword {\n  readonly password: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICity.html":{"url":"interfaces/ICity.html","title":"interface - ICity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ICity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/general/cities/interfaces/city.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\n\nexport interface ICity extends Document {\n  id?: string;\n  name: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILocation.html":{"url":"interfaces/ILocation.html","title":"interface - ILocation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILocation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/general/restaurants/interfaces/location.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        latitude\n                                \n                                \n                                        longitude\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        latitude\n                                    \n                                \n                                \n                                    \n                                        latitude:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        longitude\n                                    \n                                \n                                \n                                    \n                                        longitude:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ILocation {\n  latitude: number;\n  longitude: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMongoPoint.html":{"url":"interfaces/IMongoPoint.html","title":"interface - IMongoPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IMongoPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/general/restaurants/interfaces/mongo-point.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        coordinates\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coordinates\n                                    \n                                \n                                \n                                    \n                                        coordinates:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IMongoPoint {\n  type: string;\n  coordinates: number[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRestaurant.html":{"url":"interfaces/IRestaurant.html","title":"interface - IRestaurant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRestaurant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/general/restaurants/interfaces/restaurant.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cityId\n                                \n                                \n                                        email\n                                \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                        image\n                                \n                                \n                                        location\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cityId\n                                    \n                                \n                                \n                                    \n                                        cityId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                    \n                                \n                                \n                                    \n                                        image:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                    \n                                \n                                \n                                    \n                                        location:         IMongoPoint | LocationDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IMongoPoint | LocationDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IMongoPoint } from './mongo-point.interface';\nimport { Document } from 'mongoose';\nimport { LocationDto } from '../dto/location.dto';\n\nexport interface IRestaurant extends Document {\n  id?: string;\n  readonly cityId: string;\n  readonly image: string;\n  readonly name: string;\n  readonly email: string;\n  readonly location: IMongoPoint | LocationDto;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/system/security/users/interfaces/user.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        name\n                                \n                                \n                                            Optional\n                                        password\n                                \n                                \n                                        roles\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\n\nexport interface IUser extends Document {\n  name: string;\n  email: string;\n  password?: string;\n  roles: string[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUserJWT.html":{"url":"interfaces/IUserJWT.html","title":"interface - IUserJWT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IUserJWT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/system/security/auth/interfaces/jwt-user.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _id\n                                \n                                \n                                        email\n                                \n                                \n                                        roles\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                    \n                                \n                                \n                                    \n                                        roles:     [string]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [string]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IUserJWT {\n  _id: string;\n  email: string;\n  roles: [string];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JoiValidatorPipe.html":{"url":"injectables/JoiValidatorPipe.html","title":"injectable - JoiValidatorPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JoiValidatorPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/pipes/joi-validator.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(propertyName: string, joiSchema: Joi.ObjectSchema)\n                    \n                \n                        \n                            \n                                Defined in src/shared/pipes/joi-validator.pipe.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        propertyName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        joiSchema\n                                                  \n                                                        \n                                                                    Joi.ObjectSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(body: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/pipes/joi-validator.pipe.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  Injectable,\n  PipeTransform,\n  ForbiddenException,\n  HttpStatus,\n} from '@nestjs/common';\nimport * as Joi from '@hapi/joi';\n\n@Injectable()\nexport class JoiValidatorPipe implements PipeTransform {\n  constructor(\n    private readonly propertyName: string,\n    private readonly joiSchema: Joi.ObjectSchema,\n  ) {}\n\n  transform(body: any, metadata: ArgumentMetadata) {\n    const { error, value } = this.joiSchema.validate(body[this.propertyName]);\n    if (error) {\n      throw new ForbiddenException({\n        message: error.details[0].message,\n        key: error.details[0].context.key,\n        value: error.details[0].context.value,\n        status: HttpStatus.FORBIDDEN,\n      });\n    } else {\n      body[this.propertyName] = value;\n      return body;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/system/security/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/system/security/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/system/security/auth/strategies/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { jwtOptions } from './../../../../../shared/options/jwt.options';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtOptions.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return { _id: payload._id, email: payload.email, roles: payload.roles };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/system/security/auth/strategies/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/system/security/auth/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/system/security/auth/strategies/local.strategy.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { errors } from '../../../../../shared/exceptions/errors';\nimport { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validateUser(username, password);\n    Logger.log(user);\n    if (!user) {\n      throw errors.invalidEmailOrPassword;\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocationDto.html":{"url":"classes/LocationDto.html","title":"class - LocationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/general/restaurants/dto/location.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                latitude\n                            \n                            \n                                    Readonly\n                                longitude\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            latitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 13})@IsNumber()@Min(undefined)@Max(90)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/general/restaurants/dto/location.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            longitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 13})@IsNumber()@Min(undefined)@Max(180)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/general/restaurants/dto/location.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNumber, Min, Max } from 'class-validator';\n\nexport class LocationDto {\n  @ApiProperty({ example: 13 })\n  @IsNumber()\n  @Min(-180)\n  @Max(180)\n  readonly longitude: number;\n\n  @ApiProperty({ example: 13 })\n  @IsNumber()\n  @Min(-90)\n  @Max(90)\n  readonly latitude: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MongoPointToObjectInterceptor.html":{"url":"injectables/MongoPointToObjectInterceptor.html","title":"injectable - MongoPointToObjectInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MongoPointToObjectInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/interceptors/mongo-point-to-object.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/interceptors/mongo-point-to-object.interceptor.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class MongoPointToObjectInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ObjectToMongoPointPipe.html":{"url":"injectables/ObjectToMongoPointPipe.html","title":"injectable - ObjectToMongoPointPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ObjectToMongoPointPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/pipes/object-to-mongo-point.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(propertyName?: string)\n                    \n                \n                        \n                            \n                                Defined in src/shared/pipes/object-to-mongo-point.pipe.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        propertyName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(body: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/pipes/object-to-mongo-point.pipe.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ArgumentMetadata, Injectable, PipeTransform } from '@nestjs/common';\n\n@Injectable()\nexport class ObjectToMongoPointPipe implements PipeTransform {\n  constructor(private readonly propertyName?: string) {}\n  transform(body: any, metadata: ArgumentMetadata) {\n    if (this.propertyName) {\n      body[this.propertyName] = {\n        type: 'Point',\n        coordinates: [\n          body[this.propertyName].longitude,\n          body[this.propertyName].latitude,\n        ],\n      };\n    } else {\n      body = {\n        type: 'Point',\n        coordinates: [body.longitude, body.latitude],\n      };\n    }\n    return body;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseToObjectPipe.html":{"url":"injectables/ParseToObjectPipe.html","title":"injectable - ParseToObjectPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ParseToObjectPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/pipes/parse-to-object.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(propertyName: string)\n                    \n                \n                        \n                            \n                                Defined in src/shared/pipes/parse-to-object.pipe.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        propertyName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(body: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/pipes/parse-to-object.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  Injectable,\n  PipeTransform,\n  ForbiddenException,\n} from '@nestjs/common';\nimport * as Joi from '@hapi/joi';\n\n@Injectable()\nexport class ParseToObjectPipe implements PipeTransform {\n  constructor(private readonly propertyName: string) {}\n\n  transform(body: any, metadata: ArgumentMetadata) {\n    body[this.propertyName] = JSON.parse(body[this.propertyName]);\n    return body;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterNewUserDto.html":{"url":"classes/RegisterNewUserDto.html","title":"class - RegisterNewUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterNewUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/system/security/auth/dto/register-new-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                confirmPassword\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Readonly\n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            confirmPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'password123'})@Matches(/^.{6,}$/, {message: 'Password at least 6'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/auth/dto/register-new-user.dto.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'user@mail.com'})@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/auth/dto/register-new-user.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'user name'})@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/auth/dto/register-new-user.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'password123'})@Matches(/^.{6,}$/, {message: 'Password at least 6'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/auth/dto/register-new-user.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['user']\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/auth/dto/register-new-user.dto.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches, IsEnum, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class RegisterNewUserDto {\n  // Name\n  @ApiProperty({ example: 'user name' })\n  @IsString()\n  readonly name: string;\n\n  // Email\n  @ApiProperty({ example: 'user@mail.com' })\n  @IsEmail()\n  readonly email: string;\n\n  // Password\n  @ApiProperty({\n    example: 'password123',\n  })\n  @Matches(/^.{6,}$/, { message: 'Password at least 6' })\n  password: string;\n\n  // Confirm password\n  @ApiProperty({\n    example: 'password123',\n  })\n  @Matches(/^.{6,}$/, { message: 'Password at least 6' })\n  readonly confirmPassword: string;\n\n  readonly roles = ['user'];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestaurantDto.html":{"url":"classes/RestaurantDto.html","title":"class - RestaurantDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestaurantDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/general/restaurants/dto/restaurant.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BaseDtoClass\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                cityId\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                image\n                            \n                            \n                                    Readonly\n                                location\n                            \n                            \n                                    Readonly\n                                    Optional\n                                __v\n                            \n                            \n                                    Readonly\n                                    Optional\n                                _id\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deleted\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            cityId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '000000000000000000000000'})@IsMongoId()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/general/restaurants/dto/restaurant.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'restaurant@mail.com'})@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/general/restaurants/dto/restaurant.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            image\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: 'string', format: 'binary'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/general/restaurants/dto/restaurant.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            location\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LocationDto\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/general/restaurants/dto/restaurant.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            __v\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:14\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deleted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:33\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'document name', description: 'Name of the document'})@IsNotEmpty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:31\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:36\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseDtoClass } from '../../../../shared/base/dto/base-dto.class';\nimport { LocationDto } from './location.dto';\nimport {\n  IsMongoId,\n  IsEmail,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class RestaurantDto extends BaseDtoClass {\n  // City Id\n  @ApiProperty({ example: '000000000000000000000000' })\n  @IsMongoId()\n  readonly cityId: string;\n\n  // Image\n  @ApiProperty({ type: 'string', format: 'binary' })\n  /* readonly  */\n  image: string;\n\n  // Email\n  @ApiProperty({ example: 'restaurant@mail.com' })\n  @IsEmail()\n  readonly email: string;\n\n  // Location\n  @ApiProperty()\n  // @ValidateNested(/* { context: LocationDto } */)\n  // @Type(() => {\n  //   console.log({ LocationDto });\n  //   return LocationDto;\n  // })\n  readonly location: LocationDto;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RestaurantsController.html":{"url":"controllers/RestaurantsController.html","title":"controller - RestaurantsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RestaurantsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/general/restaurants/restaurants.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                restaurants\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                getById\n                            \n                            \n                                groupByCity\n                            \n                            \n                                nearestRestaurant\n                            \n                            \n                                search\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(image: any, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Roles('admin')@ApiOperation({summary: 'Create restaurant', description: 'End-Point for create restaurant'})@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiBody({type: RestaurantDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/general/restaurants/restaurants.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':_id')@Roles('admin')@ApiOperation({summary: 'Delete restaurant by id', description: 'End-Point for delete restaurant by id'})\n                \n            \n\n            \n                \n                    Defined in src/modules/general/restaurants/restaurants.controller.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all restaurants', description: 'End-Point for get all restaurants'})\n                \n            \n\n            \n                \n                    Defined in src/modules/general/restaurants/restaurants.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \ngetById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':_id')@ApiOperation({summary: 'Get restaurant by id', description: 'End-Point for get restaurant by id'})\n                \n            \n\n            \n                \n                    Defined in src/modules/general/restaurants/restaurants.controller.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            groupByCity\n                        \n                        \n                    \n                \n            \n            \n                \ngroupByCity()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('groupByCity')@ApiOperation({summary: 'Group restaurants and statistics about them within the city', description: 'End-Point for Statistics about restaurants with city relation restaurant name'})\n                \n            \n\n            \n                \n                    Defined in src/modules/general/restaurants/restaurants.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            nearestRestaurant\n                        \n                        \n                    \n                \n            \n            \n                \nnearestRestaurant(body: LocationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('nearest')@ApiOperation({summary: 'Find the nearest restaurant', description: 'End-Point for Find the nearest restaurant from a point'})\n                \n            \n\n            \n                \n                    Defined in src/modules/general/restaurants/restaurants.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                LocationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            search\n                        \n                        \n                    \n                \n            \n            \n                \nsearch(body: RestaurantsSearchDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('search')@ApiOperation({summary: 'Search restaurant name', description: 'End-Point for Search for restaurant with it is name'})\n                \n            \n\n            \n                \n                    Defined in src/modules/general/restaurants/restaurants.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                RestaurantsSearchDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, image: any, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':_id')@Roles('admin')@ApiOperation({summary: 'Update restaurant by id', description: 'End-Point for update restaurant by id'})@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiBody({type: RestaurantDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/general/restaurants/restaurants.controller.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    image\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ParseToObjectPipe } from './../../../shared/pipes/parse-to-object.pipe';\nimport { RolesGuard } from './../../../shared/guards/roles.guard';\nimport { RestaurantsSearchDto } from './dto/search-restaurant.dto';\n\n// Nest modules\nimport {\n  Controller,\n  Post,\n  UseInterceptors,\n  UploadedFile,\n  Body,\n  Get,\n  Param,\n  Delete,\n  Put,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n  ApiTags,\n  ApiBearerAuth,\n  ApiConsumes,\n  ApiBody,\n  ApiOperation,\n} from '@nestjs/swagger';\n\n// DTO\nimport { RestaurantDto } from './dto/restaurant.dto';\n\n// Helpers\nimport { RestaurantsService } from './restaurants.service';\n\n// Joi schema\nimport { locationValidator } from './validations/location.joi';\n\n// Pipes\nimport { UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Roles } from 'src/shared/decorators/roles.decorator';\nimport { LocationDto } from './dto/location.dto';\nimport { uploadFile } from '../../../shared/helpers/upload-file';\nimport { JoiValidatorPipe } from 'src/shared/pipes/joi-validator.pipe';\nimport { ObjectToMongoPointPipe } from 'src/shared/pipes/object-to-mongo-point.pipe';\n\n@ApiTags('Restaurants')\n@UseGuards(AuthGuard('jwt'), RolesGuard)\n@ApiBearerAuth()\n@Controller('restaurants')\nexport class RestaurantsController {\n  constructor(private readonly restaurantsService: RestaurantsService) {}\n\n  @Post()\n  @Roles('admin')\n  @ApiOperation({\n    summary: 'Create restaurant',\n    description: 'End-Point for create restaurant',\n  })\n  @UseInterceptors(FileInterceptor('image' /* ,{ dest: './upload', } */))\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({ type: RestaurantDto })\n  create(\n    @UploadedFile() image: any,\n    @Body(\n      new ParseToObjectPipe('location'),\n      new JoiValidatorPipe('location', locationValidator),\n      new ObjectToMongoPointPipe('location'),\n    )\n    body,\n  ) {\n    body.image = uploadFile({ uploadedFileType: 'images', file: image });\n    return this.restaurantsService.create(body);\n  }\n\n  @Get()\n  @ApiOperation({\n    summary: 'Get all restaurants',\n    description: 'End-Point for get all restaurants',\n  })\n  findAll() {\n    return this.restaurantsService.getAll();\n  }\n\n  @Post('nearest')\n  @ApiOperation({\n    summary: 'Find the nearest restaurant',\n    description: 'End-Point for Find the nearest restaurant from a point',\n  })\n  nearestRestaurant(@Body(new ObjectToMongoPointPipe()) body: LocationDto) {\n    return this.restaurantsService.nearestRestaurant(body);\n  }\n\n  @Post('search')\n  @ApiOperation({\n    summary: 'Search restaurant name',\n    description: 'End-Point for Search for restaurant with it is name',\n  })\n  search(\n    @Body()\n    body: RestaurantsSearchDto,\n  ) {\n    return this.restaurantsService.search(body.name);\n  }\n\n  @Get('groupByCity')\n  @ApiOperation({\n    summary: 'Group restaurants and statistics about them within the city',\n    description:\n      'End-Point for Statistics about restaurants with city relation restaurant name',\n  })\n  groupByCity() {\n    return this.restaurantsService.groupByCity();\n  }\n\n  @Get(':_id')\n  @ApiOperation({\n    summary: 'Get restaurant by id',\n    description: 'End-Point for get restaurant by id',\n  })\n  getById(@Param('_id') id: string) {\n    return this.restaurantsService.getById(id);\n  }\n\n  @Delete(':_id')\n  @Roles('admin')\n  @ApiOperation({\n    summary: 'Delete restaurant by id',\n    description: 'End-Point for delete restaurant by id',\n  })\n  delete(@Param('_id') id: string) {\n    return this.restaurantsService.delete(id);\n  }\n\n  @Put(':_id')\n  @Roles('admin')\n  @ApiOperation({\n    summary: 'Update restaurant by id',\n    description: 'End-Point for update restaurant by id',\n  })\n  @UseInterceptors(FileInterceptor('image'))\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({ type: RestaurantDto })\n  update(\n    @Param('_id') id: string,\n    @UploadedFile() image: any,\n    @Body(\n      new ParseToObjectPipe('location'),\n      new JoiValidatorPipe('location', locationValidator),\n      new ObjectToMongoPointPipe('location'),\n    )\n    body,\n  ) {\n    body.image = uploadFile({ uploadedFileType: 'images', file: image });\n    return this.restaurantsService.update(id, body);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestaurantsModule.html":{"url":"modules/RestaurantsModule.html","title":"module - RestaurantsModule","body":"\n                   \n\n\n\n\n    Modules\n    RestaurantsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RestaurantsModule\n\n\n\ncluster_RestaurantsModule_providers\n\n\n\n\nRestaurantsService\n\nRestaurantsService\n\n\n\nRestaurantsModule\n\nRestaurantsModule\n\nRestaurantsModule -->\n\nRestaurantsService->RestaurantsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/general/restaurants/restaurants.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RestaurantsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RestaurantsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { RestaurantsService } from './restaurants.service';\nimport { RestaurantsController } from './restaurants.controller';\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RestaurantsSchema } from './schemas/restaurants.schema';\n\n@Module({\n  imports: [\n    // Mongoose: register restaurant model\n    MongooseModule.forFeature([\n      { name: 'Restaurant', schema: RestaurantsSchema },\n    ]),\n  ],\n  controllers: [RestaurantsController],\n  providers: [RestaurantsService],\n})\nexport class RestaurantsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestaurantsSearchDto.html":{"url":"classes/RestaurantsSearchDto.html","title":"class - RestaurantsSearchDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestaurantsSearchDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/general/restaurants/dto/search-restaurant.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'restaurant name'})@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/general/restaurants/dto/search-restaurant.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class RestaurantsSearchDto {\n  // Name\n  @ApiProperty({ example: 'restaurant name' })\n  @IsString()\n  readonly name: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RestaurantsService.html":{"url":"injectables/RestaurantsService.html","title":"injectable - RestaurantsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RestaurantsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/general/restaurants/restaurants.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getAll\n                            \n                            \n                                getById\n                            \n                            \n                                groupByCity\n                            \n                            \n                                nearestRestaurant\n                            \n                            \n                                search\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restaurantModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/general/restaurants/restaurants.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restaurantModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(restaurant: IRestaurant)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/general/restaurants/restaurants.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    restaurant\n                                    \n                                                IRestaurant\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/general/restaurants/restaurants.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/general/restaurants/restaurants.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \ngetById(id)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/general/restaurants/restaurants.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            groupByCity\n                        \n                        \n                    \n                \n            \n            \n                \ngroupByCity()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/general/restaurants/restaurants.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            nearestRestaurant\n                        \n                        \n                    \n                \n            \n            \n                \nnearestRestaurant(location)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/general/restaurants/restaurants.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    location\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            search\n                        \n                        \n                    \n                \n            \n            \n                \nsearch(restaurantName)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/general/restaurants/restaurants.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    restaurantName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, restaurant: IRestaurant)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/general/restaurants/restaurants.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    restaurant\n                                    \n                                                IRestaurant\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { IRestaurant } from './interfaces/restaurant.interface';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class RestaurantsService {\n  constructor(\n    @InjectModel('Restaurant')\n    private readonly restaurantModel: Model,\n  ) {}\n\n  create(restaurant: IRestaurant) {\n    return this.restaurantModel.create(restaurant);\n  }\n\n  search(restaurantName) {\n    return this.restaurantModel.find({\n      name: new RegExp(restaurantName, 'i'),\n    });\n  }\n\n  groupByCity() {\n    return this.restaurantModel.aggregate([\n      {\n        $lookup: {\n          from: 'cities',\n          localField: 'cityId',\n          foreignField: '_id',\n          as: 'city',\n        },\n      },\n      {\n        $unwind: {\n          path: '$city',\n          preserveNullAndEmptyArrays: true,\n        },\n      },\n      {\n        $group: {\n          _id: '$cityId',\n          city: { $first: '$city' },\n          restaurantsData: {\n            $push: {\n              restaurantId: '$_id',\n              name: '$name',\n              // image: '$image',\n              // email: '$email',\n              location: {\n                longitude: { $arrayElemAt: ['$location.coordinates', 0] },\n                latitude: { $arrayElemAt: ['$location.coordinates', 1] },\n              },\n            },\n          },\n          restaurantsCount: { $sum: 1 },\n        },\n      },\n      {\n        $addFields: {\n          'restaurants.count': '$restaurantsCount',\n          'restaurants.data': '$restaurantsData',\n        },\n      },\n      {\n        $project: {\n          _id: 0,\n          'city.__v': 0,\n          restaurantsData: 0,\n          restaurantsCount: 0,\n        },\n      },\n    ]);\n  }\n\n  nearestRestaurant(location /* : IMongoPoint */) {\n    return this.restaurantModel.find({\n      location: { $nearSphere: { $geometry: location } },\n    });\n  }\n\n  update(id: string, restaurant: IRestaurant) {\n    return this.restaurantModel.findOneAndUpdate(\n      { _id: id },\n      { $set: restaurant },\n      { new: true },\n    );\n  }\n\n  getById(id) {\n    return this.restaurantModel.findOne({ _id: id });\n  }\n\n  delete(id) {\n    return this.restaurantModel.findOneAndDelete({ _id: id });\n  }\n\n  getAll() {\n    return this.restaurantModel.find();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/shared/guards/roles.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/shared/guards/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/guards/roles.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    // if (process.env.API_AUTH_ENABLED) {\n    const roles = this.reflector.get('roles', context.getHandler());\n    if (!roles) {\n      return true;\n    }\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const hasRole = () => user.roles.some(role => roles.includes(role));\n    return user && user.roles && hasRole();\n    // } else {\n    //   return true;\n    // }\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/system/security/users/dto/update-user.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BaseDtoClass\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                roles\n                            \n                            \n                                    Readonly\n                                    Optional\n                                __v\n                            \n                            \n                                    Readonly\n                                    Optional\n                                _id\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deleted\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'user@mail.com'})@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/users/dto/update-user.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'user'})@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/users/dto/update-user.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRoles[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({isArray: true, example: undefined})@IsArray()@ArrayUnique()@ValidArrayValues(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/users/dto/update-user.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            __v\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:14\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deleted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:33\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'document name', description: 'Name of the document'})@IsNotEmpty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:31\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseDtoClass\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseDtoClass:36\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseDtoClass } from './../../../../../shared/base/dto/base-dto.class';\nimport { UserRoles } from './../enum/roles.enums';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString, IsArray, ArrayUnique } from 'class-validator';\nimport { ValidArrayValues } from 'src/shared/validators/extend-class-validator';\n\nexport class UpdateUserDto extends BaseDtoClass {\n  // Name\n  @ApiProperty({ example: 'user' })\n  @IsString()\n  name: string;\n\n  // Email\n  @ApiProperty({ example: 'user@mail.com' })\n  @IsEmail()\n  email: string;\n\n  // Role\n  @ApiProperty({\n    isArray: true,\n    example: ['user', 'admin'],\n  })\n  @IsArray()\n  @ArrayUnique()\n  @ValidArrayValues(['admin', 'user'])\n  roles: UserRoles[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/system/security/users/classes/user.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                _id\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                password\n                            \n                            \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/users/classes/user.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/users/classes/user.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/users/classes/user.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/users/classes/user.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/users/classes/user.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\n\nexport class User {\n  _id?: string;\n\n  name: string;\n  email: string;\n\n  @Exclude()\n  password?: string;\n\n  @Exclude()\n  roles: string[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserLoginDto.html":{"url":"classes/UserLoginDto.html","title":"class - UserLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/system/security/auth/dto/user-login.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'super@man.net'})@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/auth/dto/user-login.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'P@$$$W0RD'})@Matches(/^.{6,}$/, {message: 'Password at least 6'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/system/security/auth/dto/user-login.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nexport class UserLoginDto {\n  // Email\n  @ApiProperty({ example: 'super@man.net' })\n  @IsEmail()\n  readonly email: string;\n\n  // Password\n  @ApiProperty({ example: 'P@$$$W0RD' })\n  @Matches(/^.{6,}$/, { message: 'Password at least 6' })\n  readonly password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/system/security/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                getById\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createdUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Roles('admin')@ApiOperation({summary: 'Create user', description: 'End-Point for create user'})\n                \n            \n\n            \n                \n                    Defined in src/modules/system/security/users/users.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createdUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':_id')@Roles('admin')@ApiOperation({summary: 'Delete user by id', description: 'End-Point for delete user by id'})\n                \n            \n\n            \n                \n                    Defined in src/modules/system/security/users/users.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('admin')@ApiOperation({summary: 'Get all users', description: 'End-Point for get all users'})\n                \n            \n\n            \n                \n                    Defined in src/modules/system/security/users/users.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \ngetById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':_id')@Roles('admin')@ApiOperation({summary: 'Get user by id', description: 'End-Point for get user by id'})\n                \n            \n\n            \n                \n                    Defined in src/modules/system/security/users/users.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':_id')@Roles('admin')@ApiOperation({summary: 'Update user by id', description: 'End-Point for update user by id'})\n                \n            \n\n            \n                \n                    Defined in src/modules/system/security/users/users.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { DeleteFieldsInterceptor } from './../../../../shared/interceptors/delete-fields.interceptor';\nimport { RolesGuard } from './../../../../shared/guards/roles.guard';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UsersService } from './users.service';\nimport {\n  Controller,\n  Post,\n  Get,\n  Delete,\n  Put,\n  Param,\n  Body,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { ApiTags, ApiBearerAuth, ApiOperation } from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Roles } from 'src/shared/decorators/roles.decorator';\n\n@ApiTags('Users')\n@Controller('users')\n@UseGuards(AuthGuard('jwt'), RolesGuard)\n@ApiBearerAuth()\n@UseInterceptors(new DeleteFieldsInterceptor('password'))\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  @Roles('admin')\n  @ApiOperation({\n    summary: 'Create user',\n    description: 'End-Point for create user',\n  })\n  // @ApiResponse({\n  //   status: 201,\n  //   description: 'The record has been successfully created.',\n  // })\n  // @ApiResponse({ status: 403, description: 'Forbidden.' })\n  create(@Body() createdUserDto: CreateUserDto) {\n    return this.usersService.create(createdUserDto);\n  }\n\n  @Get()\n  @Roles('admin')\n  @ApiOperation({\n    summary: 'Get all users',\n    description: 'End-Point for get all users',\n  })\n  findAll() {\n    return this.usersService.getAll();\n  }\n\n  @Get(':_id')\n  @Roles('admin')\n  @ApiOperation({\n    summary: 'Get user by id',\n    description: 'End-Point for get user by id',\n  })\n  getById(@Param('_id') id: string) {\n    return this.usersService.getById(id);\n  }\n\n  @Delete(':_id')\n  @Roles('admin')\n  @ApiOperation({\n    summary: 'Delete user by id',\n    description: 'End-Point for delete user by id',\n  })\n  delete(@Param('_id') id: string) {\n    return this.usersService.delete(id);\n  }\n\n  @Put(':_id')\n  @Roles('admin')\n  @ApiOperation({\n    summary: 'Update user by id',\n    description: 'End-Point for update user by id',\n  })\n  update(@Param('_id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(id, updateUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/system/security/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { UserSchema } from './schemas/user.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { Module } from '@nestjs/common';\n\n@Module({\n  imports: [\n    // Register user model at mongoose\n    MongooseModule.forFeature([{ name: 'User', schema: UserSchema }]),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/system/security/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createAdminIfNotExists\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                getAll\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/system/security/users/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(id: ObjectId, newPassword: IChangePassword)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/system/security/users/users.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n                                    \n                                                IChangePassword\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: IUser)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/system/security/users/users.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAdminIfNotExists\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAdminIfNotExists()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/system/security/users/users.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/system/security/users/users.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/system/security/users/users.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/system/security/users/users.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/system/security/users/users.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: ObjectId, user: IUser)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/system/security/users/users.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { bcryptOptions } from './../../../../shared/options/bcrypt.options';\nimport { constants } from './../../../../shared/constants/constants';\nimport { errors } from '../../../../shared/exceptions/errors';\nimport { User } from './classes/user';\nimport { IChangePassword } from './../auth/interfaces/change-password';\nimport { IUser } from './interfaces/user.interface';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\nimport { hash } from 'bcryptjs';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel('User')\n    private readonly userModel: Model,\n  ) {\n    this.createAdminIfNotExists();\n\n    // userModel.createMapping((err, mapping) => {\n    //   console.log({ err, mapping });\n    // });\n  }\n\n  async create(user: IUser): Promise {\n    return (await this.userModel.create(user))._doc;\n    // const { password, roles, ...newUser } = (\n    //   await this.userModel.create(user)\n    // )._doc;\n    // return newUser;\n  }\n\n  async update(id: ObjectId, user: IUser): Promise {\n    if (user.password) {\n      delete user.password;\n    }\n    const updatedUser = await this.userModel\n      .findOneAndUpdate({ _id: id }, { $set: user }, { new: true })\n      .lean();\n    if (updatedUser) {\n      return updatedUser;\n      // const { password, ...finalUserObj } = updatedUser;\n      // return finalUserObj;\n    } else {\n      throw errors.documentNotFound;\n    }\n  }\n\n  async changePassword(\n    id: ObjectId,\n    newPassword: IChangePassword,\n  ): Promise {\n    const changedPasswordUser = await this.userModel\n      .findOneAndUpdate({ _id: id }, { $set: newPassword }, { new: true })\n      .lean();\n    if (changedPasswordUser) {\n      return changedPasswordUser;\n      // const { password, ...finalUserObj } = changedPasswordUser;\n      // return finalUserObj;\n    } else {\n      throw errors.documentNotFound;\n    }\n  }\n\n  async getById(id: ObjectId): Promise {\n    const userExisted = await this.userModel\n      .findOne({\n        _id: id,\n      })\n      .lean();\n\n    if (userExisted) {\n      return userExisted;\n      // const { password, ...user } = userExisted;\n      // return user;\n    } else {\n      throw errors.documentNotFound;\n    }\n  }\n\n  async delete(id: ObjectId): Promise {\n    const userDeleted = await this.userModel\n      .findOneAndDelete({ _id: id })\n      .lean();\n    if (userDeleted) {\n      throw errors.deletedSuccessfully;\n    } else {\n      throw errors.documentNotFound;\n    }\n  }\n\n  async getByEmail(email): Promise {\n    return await this.userModel.findOne({ email }).lean();\n  }\n\n  getAll(): Promise {\n    return this.userModel.find({}).lean();\n  }\n\n  async createAdminIfNotExists() {\n    const adminExists = await this.userModel\n      .findOne({\n        email: new RegExp(constants.admin.email),\n      })\n      .lean();\n    if (!adminExists) {\n      const password = await hash(\n        constants.admin.password,\n        bcryptOptions.rounds,\n      );\n      await this.userModel.create({\n        name: constants.admin.name,\n        email: constants.admin.email,\n        password,\n        roles: constants.admin.roles,\n      });\n      Logger.log('Admin account created', 'Custom-Log');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/general/cities/cities.controller.ts\n            \n            controller\n            CitiesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/general/cities/cities.service.ts\n            \n            injectable\n            CitiesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/general/cities/dto/city.dto.ts\n            \n            class\n            CityDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/general/cities/interfaces/city.interface.ts\n            \n            interface\n            ICity\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/general/cities/schemas/city.schema.ts\n            \n            variable\n            CitySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/general/countries/countries.controller.ts\n            \n            controller\n            CountriesController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/general/countries/countries.service.ts\n            \n            injectable\n            CountriesService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/general/countries/models/country.model.ts\n            \n            variable\n            CountrySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/general/restaurants/dto/location.dto.ts\n            \n            class\n            LocationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/general/restaurants/dto/restaurant.dto.ts\n            \n            class\n            RestaurantDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/general/restaurants/dto/search-restaurant.dto.ts\n            \n            class\n            RestaurantsSearchDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/general/restaurants/interfaces/location.interface.ts\n            \n            interface\n            ILocation\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/general/restaurants/interfaces/mongo-point.interface.ts\n            \n            interface\n            IMongoPoint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/general/restaurants/interfaces/restaurant.interface.ts\n            \n            interface\n            IRestaurant\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/general/restaurants/restaurants.controller.ts\n            \n            controller\n            RestaurantsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/general/restaurants/restaurants.service.ts\n            \n            injectable\n            RestaurantsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/general/restaurants/schemas/restaurants.schema.ts\n            \n            variable\n            RestaurantsSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/general/restaurants/validations/location.joi.ts\n            \n            variable\n            locationValidator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/system/elastic-search/elastic-search.service.ts\n            \n            injectable\n            ElasticSearchService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/system/security/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/system/security/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/system/security/auth/dto/change-password-dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/system/security/auth/dto/register-new-user.dto.ts\n            \n            class\n            RegisterNewUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/system/security/auth/dto/user-login.dto.ts\n            \n            class\n            UserLoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/system/security/auth/interfaces/change-password.ts\n            \n            interface\n            IChangePassword\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/system/security/auth/interfaces/jwt-user.ts\n            \n            interface\n            IUserJWT\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/system/security/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/system/security/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/system/security/users/classes/user.ts\n            \n            class\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/system/security/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/system/security/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/system/security/users/interfaces/user.interface.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/system/security/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/system/security/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/system/security/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/shared/base/dto/base-dto.class.ts\n            \n            class\n            BaseDtoClass\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/shared/base/services/generic.service.ts\n            \n            injectable\n            CitiesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/shared/constants/constants.ts\n            \n            variable\n            constants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/constants/files-upload.ts\n            \n            variable\n            filesUpload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/exceptions/accept.exception.ts\n            \n            class\n            AcceptedException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/exceptions/errors.ts\n            \n            variable\n            errors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/filters/exceptions.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/helpers/upload-file.ts\n            \n            function\n            uploadFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/interceptors/delete-fields.interceptor.ts\n            \n            injectable\n            DeleteFieldsInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/interceptors/delete-fields.interceptor.ts\n            \n            function\n            deleteFromArrayOfSingleObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/interceptors/delete-fields.interceptor.ts\n            \n            function\n            deleting\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/interceptors/mongo-point-to-object.interceptor.ts\n            \n            injectable\n            MongoPointToObjectInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/options/bcrypt.options.ts\n            \n            variable\n            bcryptOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/options/class-validator.options.ts\n            \n            variable\n            classValidatorOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/options/elastic-search.options.ts\n            \n            variable\n            elasticSearchOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/options/jwt.options.ts\n            \n            variable\n            jwtOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/options/mongoose.options.ts\n            \n            variable\n            mongooseOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/options/rate-limit.options.ts\n            \n            variable\n            rateLimitOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/options/swagger.options.ts\n            \n            variable\n            swaggerOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/pipes/joi-validator.pipe.ts\n            \n            injectable\n            JoiValidatorPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/pipes/object-to-mongo-point.pipe.ts\n            \n            injectable\n            ObjectToMongoPointPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/pipes/parse-to-object.pipe.ts\n            \n            injectable\n            ParseToObjectPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/schemas/geo-point.schema.ts\n            \n            variable\n            GeoPointSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/validators/extend-class-validator.ts\n            \n            function\n            ValidArrayValues\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @elastic/elasticsearch : ^7.5.0\n        \n            @hapi/joi : ^16.1.8\n        \n            @nestjs/common : ^6.7.2\n        \n            @nestjs/config : 0.0.7\n        \n            @nestjs/core : ^6.7.2\n        \n            @nestjs/elasticsearch : ^7.0.0\n        \n            @nestjs/jwt : ^6.1.1\n        \n            @nestjs/mongoose : ^6.1.2\n        \n            @nestjs/passport : ^6.1.1\n        \n            @nestjs/platform-express : ^6.7.2\n        \n            @nestjs/serve-static : ^1.0.2\n        \n            @nestjs/swagger : ^4.0.9\n        \n            @nestjsx/crud : ^4.4.1\n        \n            bcryptjs : ^2.4.3\n        \n            cache-manager : ^2.10.1\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.11.0\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.4\n        \n            csurf : ^1.10.0\n        \n            dotenv : ^8.2.0\n        \n            elasticsearch : ^16.5.0\n        \n            express-rate-limit : ^5.0.0\n        \n            helmet : ^3.21.2\n        \n            mongoosastic : ^4.5.1\n        \n            mongoose : ^5.7.13\n        \n            mongoose-delete : ^0.5.1\n        \n            mongoose-elasticsearch-xp : ^5.8.0\n        \n            mongoose-timestamp : ^0.6.0\n        \n            mongoose-update-document-version : ^1.0.2\n        \n            nestjs-crud-mongoose : ^1.1.1\n        \n            passport : ^0.4.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.0\n        \n            rxjs : ^6.5.3\n        \n            swagger-ui-express : ^4.1.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserRoles   (src/.../roles.enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/system/security/users/enum/roles.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRoles\n                    \n                \n                        \n                            \n                                 admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 user\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            deleteFromArrayOfSingleObject   (src/.../delete-fields.interceptor.ts)\n                        \n                        \n                            deleting   (src/.../delete-fields.interceptor.ts)\n                        \n                        \n                            uploadFile   (src/.../upload-file.ts)\n                        \n                        \n                            ValidArrayValues   (src/.../extend-class-validator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/shared/interceptors/delete-fields.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            deleteFromArrayOfSingleObject\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteFromArrayOfSingleObject(data, field)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    field\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleting\n                        \n                        \n                    \n                \n            \n            \n                \ndeleting(object, fieldName)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    object\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fieldName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/shared/helpers/upload-file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            uploadFile\n                        \n                        \n                    \n                \n            \n            \n                \nuploadFile(undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/shared/validators/extend-class-validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            ValidArrayValues\n                        \n                        \n                    \n                \n            \n            \n                \nValidArrayValues(values, validationOptions?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationOptions\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nInstallation\n$ npm installRunning the app\n# development\n$ npm startDescription\n\nThis task for Index-Group Company\n\n\n \n\n\n\nWe need a simple api for restaurants with these requirements:-\n\nAuthentication and authorization (a System admin and normal users).\nSystem admin can add , update and delete restaurants.\nFind nearest restaurants from a given location (point).\nType-ahead search on restaurants names.\nStatistics endpoint to group restaurants and their count by city .\n\nModels :\nUser:\n\nname\nemail\npassword\nrole\n\nCity:\n\nname\n\nRestaurant:\n\ncity\nimage\nname\nemail\nlocation\n\nRecommended technology stack :\n\nNest js , Mongoose , Swagger , Passport.\n\nNotes:\n\nConsider rest standards while writing your api.\nConsider a clear project architecture.\nAdd a dummy system admin on app startup if not exists.\nWrite a clear swagger documentation.\nDeploy your api on any free hosting service.\n\nLicense\nNest is MIT licensed.\nTODO:\nBuild\n\nActivate version incrementing for documents changes\nExclude password from any response about user or auth\nCreate generic interceptor to delete fields fields\nComplete the Geo-point mongo to location interceptor\nNumbering system\nGeneric service\nPagination for all \"find many\" and \"search\"\nCreate base Schema for all models\nDocument every mongo ACL for create and update\nActivate soft delete\nFront-End: Angular\nMobile: Ionic\n\nConfig\n\nElasticsearch\nWeb sockets: Gateways\nOrganize structure flixable to extend modules\nEmail for forget password\nOAuth for authentication\nAdd validators and district them into decorators\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 Hisham T. Kamal-Al-Din\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CitiesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CountriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ElasticSearchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RestaurantsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CitiesModule\n\n\n\ncluster_CitiesModule_providers\n\n\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_providers\n\n\n\ncluster_ElasticSearchModule\n\n\n\ncluster_ElasticSearchModule_exports\n\n\n\ncluster_ElasticSearchModule_providers\n\n\n\ncluster_RestaurantsModule\n\n\n\ncluster_RestaurantsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCitiesModule\n\nCitiesModule\n\nAppModule -->\n\nCitiesModule->AppModule\n\n\n\n\n\nCountriesModule\n\nCountriesModule\n\nAppModule -->\n\nCountriesModule->AppModule\n\n\n\n\n\nElasticSearchModule\n\nElasticSearchModule\n\nAppModule -->\n\nElasticSearchModule->AppModule\n\n\n\n\n\nElasticSearchService \n\nElasticSearchService \n\nElasticSearchService  -->\n\nElasticSearchModule->ElasticSearchService \n\n\n\n\n\nRestaurantsModule\n\nRestaurantsModule\n\nAppModule -->\n\nRestaurantsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCitiesService\n\nCitiesService\n\nCitiesModule -->\n\nCitiesService->CitiesModule\n\n\n\n\n\nCountriesService\n\nCountriesService\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\n\n\nElasticSearchService\n\nElasticSearchService\n\nElasticSearchModule -->\n\nElasticSearchService->ElasticSearchModule\n\n\n\n\n\nRestaurantsService\n\nRestaurantsService\n\nRestaurantsModule -->\n\nRestaurantsService->RestaurantsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bcryptOptions   (src/.../bcrypt.options.ts)\n                        \n                        \n                            CitySchema   (src/.../city.schema.ts)\n                        \n                        \n                            classValidatorOptions   (src/.../class-validator.options.ts)\n                        \n                        \n                            constants   (src/.../constants.ts)\n                        \n                        \n                            CountrySchema   (src/.../country.model.ts)\n                        \n                        \n                            elasticSearchOptions   (src/.../elastic-search.options.ts)\n                        \n                        \n                            errors   (src/.../errors.ts)\n                        \n                        \n                            filesUpload   (src/.../files-upload.ts)\n                        \n                        \n                            GeoPointSchema   (src/.../geo-point.schema.ts)\n                        \n                        \n                            jwtOptions   (src/.../jwt.options.ts)\n                        \n                        \n                            locationValidator   (src/.../location.joi.ts)\n                        \n                        \n                            mongooseOptions   (src/.../mongoose.options.ts)\n                        \n                        \n                            rateLimitOptions   (src/.../rate-limit.options.ts)\n                        \n                        \n                            RestaurantsSchema   (src/.../restaurants.schema.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            swaggerOptions   (src/.../swagger.options.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/options/bcrypt.options.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            bcryptOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  rounds: 10,\n}\n                        \n                    \n\n\n            \n        \n\n    src/modules/general/cities/schemas/city.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CitySchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  name: {\n    /* , es_indexed: true */\n    type: String,\n  },\n  id: ObjectId,\n})\n                        \n                    \n\n\n            \n        \n\n    src/shared/options/class-validator.options.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            classValidatorOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  forbidNonWhitelisted: true,\n  forbidUnknownValues: true,\n}\n                        \n                    \n\n\n            \n        \n\n    src/shared/constants/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            constants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  admin: {\n    name: 'Admin',\n    email: 'super@man.net',\n    password: 'P@$$W0RD',\n    roles: ['admin'],\n  },\n}\n                        \n                    \n\n\n            \n        \n\n    src/modules/general/countries/models/country.model.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CountrySchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  name: {\n    type: String,\n  },\n  id: ObjectId,\n})\n                        \n                    \n\n\n            \n        \n\n    src/shared/options/elastic-search.options.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            elasticSearchOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  host: 'http://127.0.0.1:9200',\n}\n                        \n                    \n\n\n            \n        \n\n    src/shared/exceptions/errors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            errors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  // Custom Exceptions\n  deletedSuccessfully: new AcceptedException({\n    message: 'Document deleted successfully',\n  }),\n\n  // Building Exceptions\n  documentNotFound: new GoneException('Cannot found document with this ID'),\n  invalidEmailOrPassword: new UnauthorizedException(\n    'Invalid \"Email\" or \"Password\"',\n  ),\n  invalidPassword: new UnauthorizedException('Invalid old password'),\n  invalidPasswordConfirmation: new ForbiddenException(\n    '\"Password\" and \"Confirm password\" are not equal',\n  ),\n  invalidNewPassConfirmation: new ForbiddenException(\n    '\"New password\" and \"Confirm new password\" are not equal',\n  ),\n  \n  validateOnType: {\n    images: new ForbiddenException('Uploaded file not an image'),\n  },\n  uploadedFileBiggerThanMaximumAllowedFileLimit: new ForbiddenException(\n    'Uploaded file bigger than maximum allowed file limit',\n  ),\n}\n                        \n                    \n\n\n            \n        \n\n    src/shared/constants/files-upload.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            filesUpload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  images: {\n    mimesType: [\n      'image/bmp',\n      'image/cis-cod',\n      'image/gif',\n      'image/ief',\n      'image/jpeg',\n      'image/jpeg',\n      'image/jpeg',\n      'image/pipeg',\n      'image/svg+xml',\n      'image/tiff',\n      'image/tiff',\n      'image/x-cmu-raster',\n      'image/x-cmx',\n      'image/x-icon',\n      'image/x-portable-anymap',\n      'image/x-portable-bitmap',\n      'image/x-portable-graymap',\n      'image/x-portable-pixmap',\n      'image/x-rgb',\n      'image/x-xbitmap',\n      'image/x-xpixmap',\n      'image/x-xwindowdump',\n    ],\n    maximumSize: 5242880, // 5 mega-bytes binary = 5 * 1024 * 1024\n  },\n}\n                        \n                    \n\n\n            \n        \n\n    src/shared/schemas/geo-point.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GeoPointSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  _id: false,\n  type: {\n    type: String,\n    enum: ['Point'],\n    required: true,\n  },\n  coordinates: {\n    type: [Number],\n    required: true,\n  },\n})\n                        \n                    \n\n\n            \n        \n\n    src/shared/options/jwt.options.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  secret: 'abcd123456',\n  signOptions: {\n    expiresIn: 3600000, // 1 week  = 604800000 ms, 1 hour  = 3600000 ms\n  },\n  ignoreExpiration: false,\n}\n                        \n                    \n\n\n            \n        \n\n    src/modules/general/restaurants/validations/location.joi.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            locationValidator\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Joi.object({\n  latitude: Joi.number(),\n  longitude: Joi.number(),\n})\n                        \n                    \n\n\n            \n        \n\n    src/shared/options/mongoose.options.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mongooseOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  useNewUrlParser: true,\n  useCreateIndex: true,\n  useFindAndModify: false,\n  useUnifiedTopology: true,\n  // autoIndex: true, // Build indexes automatically\n  // reconnectTries: Number.MAX_VALUE, // Never stop trying to reconnect\n  // reconnectInterval: 500, // Reconnect every 500ms\n  poolSize: 10, // Maintain up to 10 socket connections  If not connected, return errors immediately rather than waiting for reconnect\n  bufferMaxEntries: 0,\n  connectTimeoutMS: 10000, // Give up initial connection after 10 seconds\n  socketTimeoutMS: 45000, // Close sockets after 45 seconds of inactivity\n  family: 4, // Use IPv4, skip trying IPv6\n}\n                        \n                    \n\n\n            \n        \n\n    src/shared/options/rate-limit.options.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            rateLimitOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 1000, // limit each IP to 1000 requests per windowMs\n}\n                        \n                    \n\n\n            \n        \n\n    src/modules/general/restaurants/schemas/restaurants.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            RestaurantsSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  cityId: { type: ObjectId, required: true, ref: 'cities' },\n  name: { type: String, required: true },\n  email: {\n    type: String,\n    required: true,\n  },\n  image: { type: String, required: true },\n  location: GeoPointSchema,\n})\n                        \n                    \n\n\n            \n        \n\n    src/shared/decorators/roles.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...roles: string[]) => SetMetadata('roles', roles)\n                        \n                    \n\n\n            \n        \n\n    src/shared/options/swagger.options.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  initOnPath: 'api',\n  basePath: 'api',\n  title: 'NestJS boilerplate',\n  description:\n    'Create boilerplate using TypeScript, Express, NestJS, Mongoose, Swagger, Passport, JWT',\n  version: '1.0',\n}\n                        \n                    \n\n\n            \n        \n\n    src/shared/decorators/user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            User\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data, req) => {\n  return req.user;\n})\n                        \n                    \n\n\n            \n        \n\n    src/modules/system/security/users/schemas/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  name: { type: String },\n  email: { type: String },\n  password: { type: String },\n  roles: [{ type: String, enum: ['admin', 'user'] }],\n})\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
